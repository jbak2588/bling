diff --git a/lib/features/auction/data/auction_repository.dart b/lib/features/auction/data/auction_repository.dart
index 1cc08c7e2d8805a5e27e463176bc3ede753683e5..6b5625038c1544e4412dadf296e1dc78f59a4ce6 100644
--- a/lib/features/auction/data/auction_repository.dart
+++ b/lib/features/auction/data/auction_repository.dart
@@ -1,31 +1,32 @@
 // lib/features/auction/data/auction_repository.dart
 
 import 'package:cloud_firestore/cloud_firestore.dart';
 
 import '../../../core/models/auction_model.dart';
 import '../../../core/models/bid_model.dart';
+import 'package:easy_localization/easy_localization.dart';
 
 /// Provides CRUD operations for auctions and bidding functionality.
 class AuctionRepository {
   final FirebaseFirestore _firestore = FirebaseFirestore.instance;
 
   CollectionReference<Map<String, dynamic>> get _auctionsCollection =>
       _firestore.collection('auctions');
 
   Future<String> createAuction(AuctionModel auction) async {
     final doc = await _auctionsCollection.add(auction.toJson());
     return doc.id;
   }
 
   Future<void> updateAuction(AuctionModel auction) async {
     await _auctionsCollection.doc(auction.id).update(auction.toJson());
   }
 
   Future<void> deleteAuction(String auctionId) async {
     await _auctionsCollection.doc(auctionId).delete();
   }
 
   Future<AuctionModel> fetchAuction(String auctionId) async {
     final doc = await _auctionsCollection.doc(auctionId).get();
     return AuctionModel.fromFirestore(doc);
   }
@@ -37,60 +38,60 @@ class AuctionRepository {
         .orderBy('endAt', descending: false) // 마감 시간이 빠른 순서대로 정렬
         .snapshots()
         .map((snapshot) =>
             snapshot.docs.map(AuctionModel.fromFirestore).toList());
   }
   // ^ ^ ^ --- 여기까지 수정 --- ^ ^ ^
 
   // V V V --- [추가] 특정 경매 하나의 정보를 실시간으로 가져오는 Stream 함수 --- V V V
   Stream<AuctionModel> getAuctionStream(String auctionId) {
     return _auctionsCollection
         .doc(auctionId)
         .snapshots()
         .map((snapshot) => AuctionModel.fromFirestore(snapshot));
   }
   // ^ ^ ^ --- 여기까지 추가 --- ^ ^ ^
 
   
 // V V V --- [수정] Firestore Transaction을 사용하여 안전하게 입찰을 처리합니다 --- V V V
   Future<void> placeBid(String auctionId, BidModel bid) async {
     final auctionRef = _auctionsCollection.doc(auctionId);
     final bidRef = auctionRef.collection('bids').doc();
 
     await _firestore.runTransaction((transaction) async {
       final auctionSnapshot = await transaction.get(auctionRef);
       if (!auctionSnapshot.exists) {
-        throw Exception("경매를 찾을 수 없습니다!");
+        throw Exception(tr('auctions.errors.notFound'));
       }
 
       final auction = AuctionModel.fromFirestore(auctionSnapshot);
 
       // 현재 입찰가보다 높은 금액인지 확인
       if (bid.bidAmount <= auction.currentBid) {
-        throw Exception("현재 입찰가보다 높은 금액을 입력해야 합니다.");
+        throw Exception(tr('auctions.errors.lowerBid'));
       }
       
       // 마감 시간이 지났는지 확인
       if (auction.endAt.toDate().isBefore(DateTime.now())) {
-        throw Exception("이미 마감된 경매입니다.");
+        throw Exception(tr('auctions.errors.alreadyEnded'));
       }
 
       // 1. auctions 문서 업데이트
       transaction.update(auctionRef, {
         'currentBid': bid.bidAmount,
         'bidHistory': FieldValue.arrayUnion([bid.toJson()]) // 간단한 히스토리 기록
       });
 
       // 2. bids 하위 컬렉션에 입찰 기록 추가
       transaction.set(bidRef, bid.toJson());
     });
   }
 
   Stream<List<BidModel>> fetchBids(String auctionId) {
     return _auctionsCollection
         .doc(auctionId)
         .collection('bids')
         .orderBy('bidTime', descending: true)
         .snapshots()
         .map((snapshot) => snapshot.docs.map(BidModel.fromFirestore).toList());
   }
 }
diff --git a/lib/features/auction/screens/auction_detail_screen.dart b/lib/features/auction/screens/auction_detail_screen.dart
index a28314fabee50b4db20d0ddc0543d7953c24cd6b..9a86e2cf9c167a16da7278467e78e1f6cee37d24 100644
--- a/lib/features/auction/screens/auction_detail_screen.dart
+++ b/lib/features/auction/screens/auction_detail_screen.dart
@@ -1,98 +1,104 @@
 // lib/features/auction/screens/auction_detail_screen.dart
 
 import 'package:bling_app/core/models/auction_model.dart';
 import 'package:bling_app/core/models/bid_model.dart';
 import 'package:bling_app/core/models/user_model.dart';
 import 'package:bling_app/features/auction/data/auction_repository.dart';
 import 'package:cloud_firestore/cloud_firestore.dart';
 import 'package:firebase_auth/firebase_auth.dart';
 import 'package:flutter/material.dart';
 import 'package:easy_localization/easy_localization.dart';
 import 'package:bling_app/features/auction/screens/edit_auction_screen.dart';
+import 'package:intl/intl.dart';
 
 
 import 'package:photo_view/photo_view.dart';
 import 'package:photo_view/photo_view_gallery.dart';
 
 
 
 class AuctionDetailScreen extends StatefulWidget {
   final AuctionModel auction;
   const AuctionDetailScreen({super.key, required this.auction});
 
   @override
   State<AuctionDetailScreen> createState() => _AuctionDetailScreenState();
 }
 
 class _AuctionDetailScreenState extends State<AuctionDetailScreen> {
   final AuctionRepository _repository = AuctionRepository();
   final _bidAmountController = TextEditingController();
   int _currentImageIndex = 0; // [추가] 현재 보이는 이미지 인덱스
 
   bool _isBidding = false; // [추가] 입찰 중 상태
 
   @override
   void dispose() {
     _bidAmountController.dispose();
     super.dispose();
   }
 
  // V V V --- [수정] 입찰하기 로직 구현 --- V V V
   Future<void> _placeBid() async {
     final user = FirebaseAuth.instance.currentUser;
     final amount = int.tryParse(_bidAmountController.text);
 
     if (user == null) {
-      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('로그인이 필요합니다.')));
+      ScaffoldMessenger.of(context)
+          .showSnackBar(SnackBar(content: Text('auctions.detail.errors.loginRequired'.tr())));
       return;
     }
     if (amount == null || amount <= 0) {
-      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('올바른 입찰 금액을 입력해주세요.')));
+      ScaffoldMessenger.of(context)
+          .showSnackBar(SnackBar(content: Text('auctions.detail.errors.invalidAmount'.tr())));
       return;
     }
 
     setState(() => _isBidding = true);
 
     try {
       final newBid = BidModel(
         id: '',
         userId: user.uid,
         bidAmount: amount,
         bidTime: Timestamp.now(),
       );
       await _repository.placeBid(widget.auction.id, newBid);
 
       _bidAmountController.clear();
       FocusScope.of(context).unfocus();
       if (mounted) {
-        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('입찰에 성공했습니다!'), backgroundColor: Colors.green));
+        ScaffoldMessenger.of(context).showSnackBar(
+            SnackBar(content: Text('auctions.detail.bidSuccess'.tr()), backgroundColor: Colors.green));
       }
 
     } catch (e) {
       if (mounted) {
-        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('입찰 실패: ${e.toString()}'), backgroundColor: Colors.red));
+        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
+            content: Text('auctions.detail.bidFail'.tr(namedArgs: {'error': e.toString()})),
+            backgroundColor: Colors.red));
       }
     } finally {
       if (mounted) setState(() => _isBidding = false);
     }
   }
 
   // V V V --- [추가] 경매 삭제 로직 --- V V V
   Future<void> _deleteAuction() async {
     final bool? confirmed = await showDialog<bool>(
       context: context,
       builder: (context) => AlertDialog(
         title: Text('auctions.delete.confirmTitle'.tr()),
         content: Text('auctions.delete.confirmContent'.tr()),
         actions: [
           TextButton(onPressed: () => Navigator.of(context).pop(false), child: Text('common.cancel'.tr())),
           TextButton(onPressed: () => Navigator.of(context).pop(true), child: Text('common.delete'.tr(), style: const TextStyle(color: Colors.red))),
         ],
       ),
     );
 
     if (confirmed == true) {
       try {
         await _repository.deleteAuction(widget.auction.id);
         if (mounted) {
           ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('auctions.delete.success'.tr()), backgroundColor: Colors.green));
@@ -194,133 +200,150 @@ class _AuctionDetailScreenState extends State<AuctionDetailScreen> {
                   },
                 ),
               if (isOwner)
                 IconButton(
                   icon: const Icon(Icons.delete_outline),
                   tooltip: 'auctions.delete.tooltip'.tr(),
                   onPressed: _deleteAuction,
                 ),
             ],
             // ^ ^ ^ --- 여기까지 추가 --- ^ ^ ^
           ),
           body: CustomScrollView(
             slivers: [
               SliverToBoxAdapter(
                 child: Column(
                   crossAxisAlignment: CrossAxisAlignment.start,
                   children: [
                     _buildImageSlider(auction.images),
                     Padding(
                       padding: const EdgeInsets.all(16.0),
                       child: Column(
                         crossAxisAlignment: CrossAxisAlignment.start,
                         children: [
                           Text(auction.title, style: Theme.of(context).textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold)),
                           const SizedBox(height: 12),
-                          Text('현재 입찰가: ${currencyFormat.format(auction.currentBid)}'),
-                          Text('마감 시간: ${DateFormat('MM/dd HH:mm').format(auction.endAt.toDate())}'),
+                          Text('auctions.detail.currentBid'
+                              .tr(namedArgs: {'amount': currencyFormat.format(auction.currentBid)})),
+                          Text('auctions.detail.endTime'
+                              .tr(namedArgs: {
+                            'time': DateFormat('MM/dd HH:mm').format(auction.endAt.toDate())
+                          })),
                           const Divider(height: 32),
                           Text(auction.description, style: const TextStyle(fontSize: 16, height: 1.5)),
                         ],
                       ),
                     ),
                   ],
                 ),
               ),
-                 const SliverToBoxAdapter(
+              SliverToBoxAdapter(
                 child: Padding(
-                  padding: EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
-                  child: Text('입찰 현황', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
+                  padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
+                  child: Text('auctions.detail.bidsTitle'.tr(),
+                      style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                 ),
               ),
               // V V V --- [수정] 입찰자 정보를 가져오는 로직을 복원합니다 --- V V V
               StreamBuilder<List<BidModel>>(
                 stream: _repository.fetchBids(widget.auction.id),
                 builder: (context, bidSnapshot) {
                   if (!bidSnapshot.hasData) return const SliverToBoxAdapter(child: Center(child: CircularProgressIndicator()));
                   final bids = bidSnapshot.data!;
-                  if (bids.isEmpty) return const SliverToBoxAdapter(child: Center(child: Padding(padding: EdgeInsets.all(16.0), child: Text('아직 입찰자가 없습니다.'))));
+                  if (bids.isEmpty)
+                    return SliverToBoxAdapter(
+                        child: Center(
+                            child: Padding(
+                                padding: const EdgeInsets.all(16.0),
+                                child: Text('auctions.detail.noBids'.tr()))));
 
                   return SliverList(
                     delegate: SliverChildBuilderDelegate(
                       (context, index) {
                         final bid = bids[index];
                         return FutureBuilder<DocumentSnapshot<Map<String, dynamic>>>(
                           future: FirebaseFirestore.instance.collection('users').doc(bid.userId).get(),
                           builder: (context, userSnapshot) {
                             if (!userSnapshot.hasData || !userSnapshot.data!.exists) {
-                              return const ListTile(leading: CircleAvatar(child: Icon(Icons.person_off)), title: Text('알 수 없는 입찰자'));
+                              return ListTile(
+                                  leading: const CircleAvatar(child: Icon(Icons.person_off)),
+                                  title: Text('auctions.detail.unknownBidder'.tr()));
                             }
                             final user = UserModel.fromFirestore(userSnapshot.data!);
                             
                             return Card(
                               margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                               child: ListTile(
                                 leading: CircleAvatar(
                                   backgroundImage: (user.photoUrl != null && user.photoUrl!.isNotEmpty) ? NetworkImage(user.photoUrl!) : null,
                                 ),
                                 title: Text(user.nickname, style: const TextStyle(fontWeight: FontWeight.bold)),
                                 subtitle: Text(currencyFormat.format(bid.bidAmount)),
                                 trailing: Text(DateFormat('HH:mm').format(bid.bidTime.toDate())),
                               ),
                             );
                           }
                         );
                       },
                       childCount: bids.length,
                     ),
                   );
                 },
               ),
               // 
             ],
           ),
           // [수정] 경매 주인이 아닐 경우에만 입찰하기 UI 표시
           bottomNavigationBar: isOwner
               ? null
               : Padding(
                   padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom, left: 8, right: 8, top: 8),
                   child: Row(
                     children: [
                       Expanded(
                         child: TextField(
                           controller: _bidAmountController,
                           keyboardType: TextInputType.number,
                           decoration: InputDecoration(
-                            labelText: '입찰가 입력 (Rp)',
+                            labelText: 'auctions.detail.bidAmountLabel'.tr(),
                             border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                           ),
                         ),
                       ),
                       const SizedBox(width: 8),
                       ElevatedButton(
                         onPressed: _isBidding ? null : _placeBid,
                         style: ElevatedButton.styleFrom(
                           padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                         ),
-                        child: _isBidding ? const SizedBox(width: 24, height: 24, child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2)) : Text('입찰하기'),
+                        child: _isBidding
+                            ? const SizedBox(
+                                width: 24,
+                                height: 24,
+                                child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2))
+                            : Text('auctions.detail.placeBid'.tr()),
                       ),
                     ],
                   ),
                 ),
         );
       },
     );
   }
 }
 
 
 
 // V V V --- [이식] product_detail_screen.dart에서 가져온 전체 화면 이미지 뷰어 --- V V V
 class FullScreenImageViewer extends StatefulWidget {
   final List<String> imageUrls;
   final int initialIndex;
 
   const FullScreenImageViewer({
     super.key,
     required this.imageUrls,
     this.initialIndex = 0,
   });
 
   @override
   State<FullScreenImageViewer> createState() => _FullScreenImageViewerState();
diff --git a/lib/features/auction/screens/auction_screen.dart b/lib/features/auction/screens/auction_screen.dart
index 98f5f58d3f87ff2538120925a72dc7e0e5d5047f..22788edb2be0644ab4aa5b4b7a14dc25a25d5856 100644
--- a/lib/features/auction/screens/auction_screen.dart
+++ b/lib/features/auction/screens/auction_screen.dart
@@ -30,34 +30,34 @@ class AuctionScreen extends StatelessWidget {
           }
           if (!snapshot.hasData || snapshot.data!.isEmpty) {
             return Center(child: Text('auctions.empty'.tr()));
           }
 
           final auctions = snapshot.data!;
 
           return ListView.builder(
             padding: const EdgeInsets.only(bottom: 80), // FAB와의 여백 확보
             itemCount: auctions.length,
             itemBuilder: (context, index) {
               final auction = auctions[index];
               return AuctionCard(auction: auction);
             },
           );
         },
       ),
       floatingActionButton: FloatingActionButton(
         onPressed: () {
           if (userModel != null) {
             Navigator.of(context).push(MaterialPageRoute(
               builder: (_) => CreateAuctionScreen(userModel: userModel!),
             ));
           } else {
             ScaffoldMessenger.of(context)
-                .showSnackBar(SnackBar(content: Text('로그인이 필요합니다.')));
+                .showSnackBar(SnackBar(content: Text('main.errors.loginRequired'.tr())));
           }
         },
-        tooltip: 'auctions.create'.tr(),
+        tooltip: 'auctions.create.tooltip'.tr(),
         child: const Icon(Icons.add),
       ),
     );
   }
 }
diff --git a/lib/features/auction/screens/create_auction_screen.dart b/lib/features/auction/screens/create_auction_screen.dart
index 057b7d3af0c769f1936193771f457d9eecb6cf9c..6e2b33711891e98b503029628943d41308fef0f7 100644
--- a/lib/features/auction/screens/create_auction_screen.dart
+++ b/lib/features/auction/screens/create_auction_screen.dart
@@ -65,99 +65,101 @@ class _CreateAuctionScreenState extends State<CreateAuctionScreen> {
   }
 
   Future<void> _submitAuction() async {
     if (!_formKey.currentState!.validate() || _isSaving) return;
     if (_images.isEmpty) {
       ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('auctions.create.errors.noPhoto'.tr())));
       return;
     }
     
     setState(() => _isSaving = true);
     
     final user = FirebaseAuth.instance.currentUser;
     if (user == null) return;
 
     try {
       List<String> imageUrls = [];
       for (var imageFile in _images) {
         // [수정] const를 제거하여 매번 새로운 고유 ID를 생성합니다.
         final fileName = const Uuid().v4();
         final ref = FirebaseStorage.instance.ref().child('auction_images/${user.uid}/$fileName');
         await ref.putFile(File(imageFile.path));
         imageUrls.add(await ref.getDownloadURL());
       }
 
       final now = Timestamp.now();
-      final endAt = Timestamp.fromMillisecondsSinceEpoch(now.millisecondsSinceEpoch + Duration(days: _durationInDays).inMilliseconds);
+      final endAt = Timestamp.fromMillisecondsSinceEpoch(
+          now.millisecondsSinceEpoch + Duration(days: _durationInDays).inMilliseconds);
       final startPrice = int.tryParse(_startPriceController.text) ?? 0;
 
       final newAuction = AuctionModel(
         id: '',
         title: _titleController.text.trim(),
         description: _descriptionController.text.trim(),
         images: imageUrls,
         startPrice: startPrice,
         currentBid: startPrice,
         bidHistory: [],
-        location: widget.userModel.locationName ?? 'Unknown',
+        location: widget.userModel.locationName ?? 'postCard.locationNotSet'.tr(),
         geoPoint: widget.userModel.geoPoint,
         startAt: now,
         endAt: endAt,
         ownerId: user.uid,
       );
 
       await _repository.createAuction(newAuction);
 
       if (mounted) {
         ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('auctions.create.success'.tr()), backgroundColor: Colors.green));
         Navigator.of(context).pop();
       }
     } catch (e) {
       if (mounted) {
         ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('auctions.create.fail'.tr(namedArgs: {'error': e.toString()})), backgroundColor: Colors.red));
       }
     } finally {
       if (mounted) setState(() => _isSaving = false);
     }
   }
 
   @override
   Widget build(BuildContext context) {
     return Scaffold(
       appBar: AppBar(
         title: Text('auctions.create.title'.tr()),
         actions: [ if (!_isSaving) TextButton(onPressed: _submitAuction, child: Text('common.done'.tr())) ],
       ),
       body: Stack(
         children: [
           Form(
             key: _formKey,
             child: ListView(
               padding: const EdgeInsets.all(16.0),
               children: [
                 // V V V --- [수정] 이미지 선택 및 취소 기능이 포함된 UI --- V V V
-                Text('사진 등록 (최대 10장)', style: Theme.of(context).textTheme.titleMedium),
+                Text('auctions.create.form.photoSectionTitle'.tr(),
+                    style: Theme.of(context).textTheme.titleMedium),
                 const SizedBox(height: 8),
                 SizedBox(
                   height: 100,
                   child: ListView(
                     scrollDirection: Axis.horizontal,
                     children: [
                       ..._images.asMap().entries.map((entry) {
                         final index = entry.key;
                         final xfile = entry.value;
                         return Padding(
                           padding: const EdgeInsets.only(right: 8.0),
                           child: Stack(
                             children: [
                               ClipRRect(
                                 borderRadius: BorderRadius.circular(8.0),
                                 child: Image.file(File(xfile.path), width: 100, height: 100, fit: BoxFit.cover),
                               ),
                               Positioned(
                                 top: 4, right: 4,
                                 child: InkWell(
                                   onTap: () => _removeImage(index),
                                   child: const CircleAvatar(
                                     radius: 12, backgroundColor: Colors.black54,
                                     child: Icon(Icons.close, color: Colors.white, size: 16),
                                   ),
@@ -165,68 +167,79 @@ class _CreateAuctionScreenState extends State<CreateAuctionScreen> {
                               ),
                             ],
                           ),
                         );
                       }),
                       if (_images.length < 10)
                         GestureDetector(
                           onTap: _pickImages,
                           child: Container(
                             width: 100, height: 100,
                             decoration: BoxDecoration(
                               color: Colors.grey[200],
                               borderRadius: BorderRadius.circular(8),
                             ),
                             child: const Icon(Icons.add_a_photo_outlined, color: Colors.grey),
                           ),
                         ),
                     ],
                   ),
                 ),
                 const SizedBox(height: 24),
                 
                 TextFormField(
                   controller: _titleController,
                   decoration: InputDecoration(labelText: 'auctions.create.form.title'.tr(), border: const OutlineInputBorder()),
-                  validator: (value) => (value == null || value.trim().isEmpty) ? '제목을 입력해주세요.' : null,
+                  validator: (value) =>
+                      (value == null || value.trim().isEmpty) ? 'auctions.form.titleRequired'.tr() : null,
                 ),
                 const SizedBox(height: 16),
                 TextFormField(
                   controller: _descriptionController,
                   decoration: InputDecoration(labelText: 'auctions.create.form.description'.tr(), border: const OutlineInputBorder()),
                   maxLines: 5,
-                  validator: (value) => (value == null || value.trim().isEmpty) ? '설명을 입력해주세요.' : null,
+                  validator: (value) => (value == null || value.trim().isEmpty)
+                      ? 'auctions.form.descriptionRequired'.tr()
+                      : null,
                 ),
                 const SizedBox(height: 16),
                  TextFormField(
                   controller: _startPriceController,
                   decoration: InputDecoration(labelText: 'auctions.create.form.startPrice'.tr(), border: const OutlineInputBorder(), prefixText: 'Rp '),
                   keyboardType: TextInputType.number,
-                  validator: (value) => (value == null || value.trim().isEmpty) ? '시작가를 입력해주세요.' : null,
+                  validator: (value) => (value == null || value.trim().isEmpty)
+                      ? 'auctions.form.startPriceRequired'.tr()
+                      : null,
                 ),
                 const SizedBox(height: 16),
                 DropdownButtonFormField<int>(
                   value: _durationInDays,
                   decoration: InputDecoration(labelText: 'auctions.create.form.duration'.tr(), border: const OutlineInputBorder()),
-                  items: [3, 5, 7].map((days) => DropdownMenuItem(value: days, child: Text('$days일'))).toList(),
+                  items: [3, 5, 7]
+                      .map((days) => DropdownMenuItem(
+                          value: days,
+                          child: Text('auctions.create.form.durationOption'
+                              .tr(namedArgs: {'days': days.toString()}))))
+                      .toList(),
                   onChanged: (value) {
                     if (value != null) setState(() => _durationInDays = value);
                   },
                 ),
                 const SizedBox(height: 16),
                 ListTile(
                   contentPadding: EdgeInsets.zero,
                   leading: Icon(Icons.location_on_outlined, color: Colors.grey[600]),
                   title: Text('auctions.create.form.location'.tr()),
-                  subtitle: Text(widget.userModel.locationName ?? '위치 정보 없음'),
+                  subtitle: Text(
+                      widget.userModel.locationName ?? 'postCard.locationNotSet'.tr()),
                   dense: true,
                 ),
               ],
             ),
           ),
           if (_isSaving)
             Container(color: Colors.black.withOpacity(0.5), child: const Center(child: CircularProgressIndicator())),
         ],
       ),
     );
   }
 }
\ No newline at end of file
diff --git a/lib/features/auction/screens/edit_auction_screen.dart b/lib/features/auction/screens/edit_auction_screen.dart
index 7628bcbec8a1360b770702abbb210b8bfc7eb907..22dd5c6a1c5a680c8b7db92a5734f4202a833b49 100644
--- a/lib/features/auction/screens/edit_auction_screen.dart
+++ b/lib/features/auction/screens/edit_auction_screen.dart
@@ -79,70 +79,73 @@ class _EditAuctionScreenState extends State<EditAuctionScreen> {
         } else if (image is String) {
           // 기존 이미지 URL(String)이면 그대로 사용
           imageUrls.add(image);
         }
       }
 
       final updatedAuction = AuctionModel(
         id: widget.auction.id,
         title: _titleController.text.trim(),
         description: _descriptionController.text.trim(),
         images: imageUrls,
         // 수정되지 않는 필드들은 기존 값을 그대로 사용
         startPrice: widget.auction.startPrice,
         currentBid: widget.auction.currentBid,
         bidHistory: widget.auction.bidHistory,
         location: widget.auction.location,
         geoPoint: widget.auction.geoPoint,
         startAt: widget.auction.startAt,
         endAt: widget.auction.endAt,
         ownerId: widget.auction.ownerId,
       );
 
       await _repository.updateAuction(updatedAuction);
 
       if (mounted) {
-        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('경매 정보가 수정되었습니다.'), backgroundColor: Colors.green));
+        ScaffoldMessenger.of(context).showSnackBar(
+            SnackBar(content: Text('auctions.edit.success'.tr()), backgroundColor: Colors.green));
         Navigator.of(context).pop();
       }
     } catch (e) {
       if (mounted) {
-        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('수정에 실패했습니다: $e'), backgroundColor: Colors.red));
+        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
+            content: Text('auctions.edit.fail'.tr(namedArgs: {'error': e.toString()})),
+            backgroundColor: Colors.red));
       }
     } finally {
       if (mounted) setState(() => _isSaving = false);
     }
   }
 
   @override
   Widget build(BuildContext context) {
     return Scaffold(
       appBar: AppBar(
-        title: Text('경매 정보 수정'), // TODO: 다국어
+        title: Text('auctions.edit.title'.tr()),
         actions: [
           if (!_isSaving)
-            TextButton(onPressed: _updateAuction, child: Text('저장')), // TODO: 다국어
+            TextButton(onPressed: _updateAuction, child: Text('auctions.edit.save'.tr())),
         ],
       ),
       body: Stack(
         children: [
           Form(
             key: _formKey,
             child: ListView(
               padding: const EdgeInsets.all(16.0),
               children: [
                 // 이미지 선택 및 수정 UI
                  SizedBox(
                   height: 100,
                   child: ListView(
                     scrollDirection: Axis.horizontal,
                     children: [
                       ..._images.asMap().entries.map((entry) {
                         final index = entry.key;
                         final image = entry.value;
                         ImageProvider imageProvider;
                         if (image is XFile) {
                           imageProvider = FileImage(File(image.path));
                         } else {
                           imageProvider = NetworkImage(image as String);
                         }
                         return Padding(
@@ -158,45 +161,53 @@ class _EditAuctionScreenState extends State<EditAuctionScreen> {
                                 child: InkWell(
                                   onTap: () => _removeImage(index),
                                   child: const CircleAvatar(radius: 12, backgroundColor: Colors.black54, child: Icon(Icons.close, color: Colors.white, size: 16)),
                                 ),
                               ),
                             ],
                           ),
                         );
                       }),
                       if (_images.length < 10)
                         GestureDetector(
                           onTap: _pickImages,
                           child: Container(
                             width: 100, height: 100,
                             decoration: BoxDecoration(color: Colors.grey[200], borderRadius: BorderRadius.circular(8)),
                             child: const Icon(Icons.add_a_photo_outlined, color: Colors.grey),
                           ),
                         ),
                     ],
                   ),
                 ),
                 const SizedBox(height: 24),
                 
                 TextFormField(
                   controller: _titleController,
-                  decoration: const InputDecoration(labelText: '제목', border: OutlineInputBorder()),
-                  validator: (value) => (value == null || value.trim().isEmpty) ? '제목을 입력해주세요.' : null,
+                  decoration: InputDecoration(
+                      labelText: 'auctions.create.form.title'.tr(),
+                      border: const OutlineInputBorder()),
+                  validator: (value) => (value == null || value.trim().isEmpty)
+                      ? 'auctions.form.titleRequired'.tr()
+                      : null,
                 ),
                 const SizedBox(height: 16),
                 TextFormField(
                   controller: _descriptionController,
-                  decoration: const InputDecoration(labelText: '상세 설명', border: OutlineInputBorder()),
+                  decoration: InputDecoration(
+                      labelText: 'auctions.create.form.description'.tr(),
+                      border: const OutlineInputBorder()),
                   maxLines: 5,
-                  validator: (value) => (value == null || value.trim().isEmpty) ? '설명을 입력해주세요.' : null,
+                  validator: (value) => (value == null || value.trim().isEmpty)
+                      ? 'auctions.form.descriptionRequired'.tr()
+                      : null,
                 ),
               ],
             ),
           ),
           if (_isSaving)
             Container(color: Colors.black.withOpacity(0.5), child: const Center(child: CircularProgressIndicator())),
         ],
       ),
     );
   }
 }
\ No newline at end of file
diff --git a/lib/features/auction/widgets/auction_card.dart b/lib/features/auction/widgets/auction_card.dart
index b7bc9fcc146fae3420eb6bb6a9fac85f038daaad..47d9e5b3fa1af34df60e4bfff44f17d17e5bb1d5 100644
--- a/lib/features/auction/widgets/auction_card.dart
+++ b/lib/features/auction/widgets/auction_card.dart
@@ -1,42 +1,43 @@
 // lib/features/auction/widgets/auction_card.dart
 
 import 'package:bling_app/core/models/auction_model.dart';
 import 'package:bling_app/features/auction/screens/auction_detail_screen.dart'; // [추가] 상세 화면 임포트
 import 'package:flutter/material.dart';
 import 'package:easy_localization/easy_localization.dart';
+import 'package:intl/intl.dart';
 // [추가]
 
 class AuctionCard extends StatelessWidget {
   final AuctionModel auction;
   const AuctionCard({super.key, required this.auction});
 
   @override
   Widget build(BuildContext context) {
     final NumberFormat currencyFormat = NumberFormat.currency(locale: 'id_ID', symbol: 'Rp ', decimalDigits: 0);
     // TODO: 남은 시간을 실시간으로 계산하는 로직(Timer) 추가 필요
-    final String timeLeft = '마감: ${DateFormat('MM/dd HH:mm').format(auction.endAt.toDate())}';
+    final String timeLeft = DateFormat('MM/dd HH:mm').format(auction.endAt.toDate());
 
     return Card(
       margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
       elevation: 3,
       clipBehavior: Clip.antiAlias,
       shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
       child: InkWell(
         // V V V --- [수정] onTap에 상세 화면으로 이동하는 로직을 추가합니다 --- V V V
         onTap: () {
           Navigator.of(context).push(
             MaterialPageRoute(
               builder: (_) => AuctionDetailScreen(auction: auction),
             ),
           );
         },
         // ^ ^ ^ --- 여기까지 수정 --- ^ ^ ^
         child: Column(
           crossAxisAlignment: CrossAxisAlignment.start,
           children: [
             if (auction.images.isNotEmpty)
               Image.network(
                 auction.images.first,
                 height: 200,
                 width: double.infinity,
                 fit: BoxFit.cover,
