diff --git a/lib/features/location/screens/location_setting_screen.dart b/lib/features/location/screens/location_setting_screen.dart
index fa39d0fa6c6f2a0b323284e6a160a49db8b8bc0c..e0fb5ac2a19e94f4a587a3747bcb709f30d83919 100644
--- a/lib/features/location/screens/location_setting_screen.dart
+++ b/lib/features/location/screens/location_setting_screen.dart
@@ -99,55 +99,55 @@ class _LocationSettingScreenState extends State<LocationSettingScreen> {
 
     // 5. 우리 DB 어디에서도 해당 Kecamatan을 찾지 못한 경우
     debugPrint("DB 오류: '$provName' 주에서 '$cleanKecName' Kecamatan을 찾을 수 없습니다.");
     return null;
   }
 
 // 기존의 _createLocationParts 함수는 삭제합니다.
 
   // Firestore에 사용자 위치 정보를 생성 또는 업데이트하는 통합 함수
   Future<void> _updateUserLocation(String locationName,
       Map<String, String> locationParts, GeoPoint geoPoint) async {
     final user = FirebaseAuth.instance.currentUser;
     if (user == null) return;
 
     // .set(..., merge: true)를 사용하여, 문서가 없으면 생성하고 있으면 필드를 업데이트합니다.
     await FirebaseFirestore.instance.collection('users').doc(user.uid).set({
       'locationName': locationName,
       'locationParts': locationParts,
       'geoPoint': geoPoint,
       'neighborhoodVerified': true,
     }, SetOptions(merge: true));
 
     if (mounted) {
       ScaffoldMessenger.of(context)
           .showSnackBar(SnackBar(content: Text('location.success'.tr())));
-      // 성공 후, 모든 이전 화면을 지우고 HomeScreen으로 이동합니다.
-      // Navigator.of(context).pushAndRemoveUntil(
-      //   MaterialPageRoute(builder: (context) => const HomeScreen()),
-      //   (Route<dynamic> route) => false,
-      // );
+      Navigator.pop(context, {
+        'locationName': locationName,
+        'locationParts': locationParts,
+        'geoPoint': geoPoint,
+      });
     }
   }
 
   // 현재 GPS 위치로 주소 업데이트
   Future<void> _setNeighborhoodWithGPS() async {
     setState(() => _isLoading = true);
 
     try {
       // 1. 위치 서비스 활성화 여부 확인
       bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
       if (!serviceEnabled && mounted) {
         ScaffoldMessenger.of(context).showSnackBar(SnackBar(
             content: Text('location.error'
                 .tr(namedArgs: {'error': 'GPS service is disabled'}))));
         setState(() => _isLoading = false);
         return;
       }
 
       // 2. 위치 권한 요청
       LocationPermission permission = await Geolocator.checkPermission();
       if (permission == LocationPermission.denied) {
         permission = await Geolocator.requestPermission();
       }
       if (permission == LocationPermission.deniedForever) {
         if (mounted) {
diff --git a/lib/features/marketplace/screens/product_edit_screen.dart b/lib/features/marketplace/screens/product_edit_screen.dart
index c51acd62be4477f158b1c1fd3b685bb298f49380..164da6088af92f9d03c30f4d0b1b25d20e276cdc 100644
--- a/lib/features/marketplace/screens/product_edit_screen.dart
+++ b/lib/features/marketplace/screens/product_edit_screen.dart
@@ -1,38 +1,39 @@
 import 'dart:io';
 // import 'package:bling_app/features/marketplace/domain/product_model_old.dart';
 import 'package:cloud_firestore/cloud_firestore.dart';
 import 'package:firebase_storage/firebase_storage.dart';
 import 'package:firebase_auth/firebase_auth.dart';
 import 'package:flutter/material.dart';
 import 'package:image_picker/image_picker.dart';
 import 'package:easy_localization/easy_localization.dart';
 
 import '../../../core/models/product_model.dart';
 import '../../../core/models/user_model.dart';
 import '../../categories/domain/category.dart';
 import '../../categories/screens/parent_category_screen.dart';
+import '../../location/screens/location_setting_screen.dart';
 
 class ProductEditScreen extends StatefulWidget {
 final ProductModel product;
   const ProductEditScreen({super.key, required this.product});
 
   @override
   State<ProductEditScreen> createState() => _ProductEditScreenState();
 }
 
 class _ProductEditScreenState extends State<ProductEditScreen> {
   final _formKey = GlobalKey<FormState>();
   final _titleController = TextEditingController();
   final _priceController = TextEditingController();
   final _descriptionController = TextEditingController();
   final _addressController = TextEditingController();
   final _transactionPlaceController = TextEditingController();
 
   bool _isNegotiable = false;
   List<String> _existingImageUrls = [];
   final List<XFile> _images = [];
   bool _isLoading = false;
   Category? _selectedCategory;
   String _condition = 'used';
 
   @override
@@ -82,50 +83,71 @@ class _ProductEditScreenState extends State<ProductEditScreen> {
   }
 
   Future<void> _loadInitialCategory() async {
     final doc = await FirebaseFirestore.instance
         .collection('categories')
         .doc(widget.product.categoryId)
         .get();
     if (doc.exists) {
       setState(() {
         _selectedCategory = Category.fromFirestore(doc);
       });
     }
   }
 
   void _selectCategory() async {
     final result = await Navigator.of(context).push<Category>(
       MaterialPageRoute(builder: (context) => const ParentCategoryScreen()),
     );
     if (result != null && mounted) {
       setState(() {
         _selectedCategory = result;
       });
     }
   }
 
+  Future<void> _resetLocation() async {
+    final result = await Navigator.of(context).push<Map<String, dynamic>?>(
+      MaterialPageRoute(builder: (_) => const LocationSettingScreen()),
+    );
+    if (result != null) {
+      await FirebaseFirestore.instance
+          .collection('products')
+          .doc(widget.product.id)
+          .update({
+        'locationName': result['locationName'],
+        'locationParts': result['locationParts'],
+        'geoPoint': result['geoPoint'],
+      });
+      if (mounted) {
+        setState(() {
+          _addressController.text = result['locationName'] ?? '';
+        });
+      }
+    }
+  }
+
   String _getCategoryName(BuildContext context, Category? category) {
     if (category == null) return 'selectCategory'.tr();
     final langCode = context.locale.languageCode;
     switch (langCode) {
       case 'ko':
         return category.nameKo;
       case 'id':
         return category.nameId;
       default:
         return category.nameEn;
     }
   }
 
   Future<void> _saveProduct() async {
     if (_isLoading) return;
     if (_existingImageUrls.isEmpty && _images.isEmpty) {
       ScaffoldMessenger.of(context).showSnackBar(
         SnackBar(content: Text('marketplace.errors.noPhoto'.tr())),
       );
       return;
     }
     if (!_formKey.currentState!.validate()) {
       return;
     }
 
@@ -364,50 +386,57 @@ class _ProductEditScreenState extends State<ProductEditScreen> {
                 keyboardType: TextInputType.number,
                 decoration: InputDecoration(
                     labelText: 'marketplace.edit.priceHint'.tr()),
                 validator: (value) =>
                     value == null || value.isEmpty
                         ? 'marketplace.errors.requiredField'.tr()
                         : null,
               ),
               const SizedBox(height: 16),
               TextFormField(
                 controller: _descriptionController,
                 maxLines: 5,
                 decoration: InputDecoration(
                     labelText: 'marketplace.edit.descriptionHint'.tr()),
                 validator: (value) =>
                     value == null || value.isEmpty
                         ? 'marketplace.errors.requiredField'.tr()
                         : null,
               ),
               const SizedBox(height: 16),
               TextFormField(
                 controller: _addressController,
                 decoration: InputDecoration(
                     labelText: 'marketplace.edit.addressHint'.tr()),
               ),
+              Align(
+                alignment: Alignment.centerRight,
+                child: TextButton(
+                  onPressed: _resetLocation,
+                  child: Text('marketplace.edit.resetLocation'.tr()),
+                ),
+              ),
               const SizedBox(height: 16),
               TextFormField(
                 controller: _transactionPlaceController,
                 decoration: InputDecoration(labelText: 'address_detail_hint'.tr()),
               ),
               const SizedBox(height: 16),
               Row(
                 children: [
                   Text('marketplace.edit.negotiable'.tr()),
                   Switch(
                     value: _isNegotiable,
                     onChanged: (value) {
                       setState(() {
                         _isNegotiable = value;
                       });
                     },
                   ),
                 ],
               ),
               const SizedBox(height: 16),
               DropdownButtonFormField<String>(
                 value: _condition,
                 decoration: const InputDecoration(labelText: 'Condition'),
                 items: const [
                   DropdownMenuItem(value: 'new', child: Text('New')),
diff --git a/lib/features/marketplace/screens/product_registration_screen.dart b/lib/features/marketplace/screens/product_registration_screen.dart
index 3b4a2ad4c0aeab229e34bd038fbf2d31f2addba9..0f15b7eb653d587efedfe7257d33e13d5e320f49 100644
--- a/lib/features/marketplace/screens/product_registration_screen.dart
+++ b/lib/features/marketplace/screens/product_registration_screen.dart
@@ -1,124 +1,100 @@
 // lib/features/marketplace/presentation/screens/product_registration_screen.dart
 
 import 'dart:io';
 import 'package:bling_app/features/categories/domain/category.dart';
 import 'package:bling_app/features/categories/screens/parent_category_screen.dart';
 // import old model is replaced with ProductModel
 import '../../../core/models/product_model.dart';
 import 'package:cloud_firestore/cloud_firestore.dart';
 import 'package:easy_localization/easy_localization.dart';
 import 'package:firebase_auth/firebase_auth.dart';
 import 'package:firebase_storage/firebase_storage.dart';
 import 'package:flutter/material.dart';
-import 'package:geocoding/geocoding.dart';
-// import 'package:geoflutterfire_plus/geoflutterfire_plus.dart';
-import 'package:geolocator/geolocator.dart';
 import 'package:image_picker/image_picker.dart';
-import 'package:permission_handler/permission_handler.dart';
 import 'package:uuid/uuid.dart';
 
 // ✅ [추가] UserModel을 사용하기 위해 import 합니다.
 import '../../../../core/models/user_model.dart';
 
 class ProductRegistrationScreen extends StatefulWidget {
   const ProductRegistrationScreen({super.key});
 
   @override
   State<ProductRegistrationScreen> createState() =>
       _ProductRegistrationScreenState();
 }
 
 class _ProductRegistrationScreenState extends State<ProductRegistrationScreen> {
   final _formKey = GlobalKey<FormState>();
   final _titleController = TextEditingController();
   final _priceController = TextEditingController();
   final _descriptionController = TextEditingController();
   final _addressController = TextEditingController();
   final _transactionPlaceController = TextEditingController();
 
   List<XFile> _images = [];
   bool _isNegotiable = false;
   bool _isLoading = false;
 
   Category? _selectedCategory;
   // Position? _currentPosition;
 
   // 현재 상품 상태 및 추가 입력값
   String _condition = 'used';
 
   @override
   void initState() {
     super.initState();
-    _checkLocationAndPermission();
+    _initializeLocation();
   }
 
   @override
   void dispose() {
     _titleController.dispose();
     _priceController.dispose();
     _descriptionController.dispose();
     _addressController.dispose();
     _transactionPlaceController.dispose();
     super.dispose();
   }
 
-  Future<void> _checkLocationAndPermission() async {
-    final status = await Permission.location.status;
-    if (status.isGranted) {
-      await _getCurrentLocation();
-    } else {
-      final requestedStatus = await Permission.location.request();
-      if (requestedStatus.isGranted) {
-        await _getCurrentLocation();
-      }
-    }
-  }
-
-  Future<void> _getCurrentLocation() async {
-    try {
-      Position position = await Geolocator.getCurrentPosition(
-        desiredAccuracy: LocationAccuracy.high,
-      );
-      List<Placemark> placemarks = await placemarkFromCoordinates(
-        position.latitude,
-        position.longitude,
-      );
-
-      if (placemarks.isNotEmpty && mounted) {
-        final placemark = placemarks.first;
-        final neighborhood = placemark.subLocality?.isNotEmpty == true
-            ? placemark.subLocality
-            : placemark.locality;
+  Future<void> _initializeLocation() async {
+    final user = FirebaseAuth.instance.currentUser;
+    if (user == null) return;
 
+    final doc = await FirebaseFirestore.instance
+        .collection('users')
+        .doc(user.uid)
+        .get();
+    if (doc.exists) {
+      final userModel = UserModel.fromFirestore(doc);
+      if (mounted) {
         setState(() {
-          _addressController.text = neighborhood ?? '';
-          // _currentPosition = position;
+          _addressController.text = userModel.locationName ?? '';
         });
       }
-    } catch (e) {
-      // 위치 정보 가져오기 실패 시 처리
     }
   }
 
   void _selectCategory() async {
     final result = await Navigator.of(context).push<Category>(
       MaterialPageRoute(builder: (context) => const ParentCategoryScreen()),
     );
 
     if (result != null && mounted) {
       setState(() {
         _selectedCategory = result;
       });
     }
   }
 
   Future<void> _pickImages() async {
     final pickedImages = await ImagePicker().pickMultiImage(limit: 10);
     if (pickedImages.isNotEmpty) {
       setState(() {
         _images = pickedImages;
       });
     }
   }
 
   Future<void> _submitProduct() async {
diff --git a/lib/features/my_bling/screens/profile_edit_screen.dart b/lib/features/my_bling/screens/profile_edit_screen.dart
index e4603fb5158af34d848320dc727d7ea30d72e56c..7a516a4e2806d7cbdfef4d370ce7f23439b69f8f 100644
--- a/lib/features/my_bling/screens/profile_edit_screen.dart
+++ b/lib/features/my_bling/screens/profile_edit_screen.dart
@@ -234,66 +234,64 @@ class _MyProfileEditScreenState extends State<MyProfileEditScreen> {
                               ),
                             ],
                           ),
                         ),
                         const SizedBox(height: 24),
                         TextField(
                           controller: _nicknameController,
                           decoration: InputDecoration(
                               labelText: 'profileEdit.nicknameHint'.tr()),
                         ),
                         const SizedBox(height: 16),
                         TextField(
                           controller: _phoneController,
                           keyboardType: TextInputType.phone,
                           decoration: InputDecoration(
                               labelText: 'profileEdit.phoneHint'.tr()),
                         ),
                         const SizedBox(height: 16),
                         TextField(
                           controller: _bioController,
                           decoration: InputDecoration(
                               labelText: 'profileEdit.bioHint'.tr()),
                           maxLines: 3,
                         ),
                         const SizedBox(height: 24),
-                        Row(
-                          children: [
-                            Expanded(
-                              child: Text(
-                                'profileEdit.locationTitle'.tr(),
-                                style: theme.textTheme.titleMedium,
-                              ),
-                            ),
-                            TextButton(
-                              onPressed: _openLocationSetting,
-                              child: Text('profileEdit.changeLocation'.tr()),
-                            ),
-                          ],
+                        ListTile(
+                          contentPadding: EdgeInsets.zero,
+                          title: Text(
+                            'profileEdit.locationTitle'.tr(),
+                            style: theme.textTheme.titleMedium,
+                          ),
+                          subtitle: Text(
+                              _locationName ?? 'location.locationNotSet'.tr()),
+                          trailing: TextButton(
+                            onPressed: _openLocationSetting,
+                            child: Text('profileEdit.changeLocation'.tr()),
+                          ),
                         ),
-                        const SizedBox(height: 8),
-                        Text(_locationName ?? 'location.locationNotSet'.tr()),
+                        const SizedBox(height: 16),
                         const SizedBox(height: 24),
                         // const Divider(),
                         const SizedBox(height: 16),
                         Text('profileEdit.interests.title'.tr(),
                             style: theme.textTheme.titleMedium),
                         const SizedBox(height: 8),
                         Row(
                           children: [
                             Expanded(
                               child: TextField(
                                 controller: _interestController,
                                 decoration: InputDecoration(
                                     hintText:
                                         'profileEdit.interests.hint'.tr(),
                                         hintStyle: const TextStyle(color: Colors.grey),),
                                 onSubmitted: (_) => _addInterest(),
                               ),
                             ),
                             IconButton(
                               icon: const Icon(Icons.add),
                               onPressed: _addInterest,
                             ),
                           ],
                         ),
                         const SizedBox(height: 8),
