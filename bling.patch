diff --git a/docs/room_listing_model.md b/docs/room_listing_model.md
new file mode 100644
index 0000000000000000000000000000000000000000..a1007581076edf10f36299a0c05bfda395e14c3c
--- /dev/null
+++ b/docs/room_listing_model.md
@@ -0,0 +1,16 @@
+# RoomListingModel Overview
+
+`RoomListingModel` defines the data used for Kos/boarding and other real estate listings.
+It mirrors the `rooms_listings` collection described in the project docs.
+
+Fields captured include:
+- `roomType` (e.g. private or shared)
+- `address` and optional `geoPoint`
+- `price` and optional `deposit`
+- `size` and `amenities`
+- `photos` URLs
+- `contactInfo` for the host
+- `ownerType` (owner or agent)
+- `createdAt` timestamp
+
+See `lib/core/models/room_listing_model.dart` for implementation.
diff --git a/lib/core/models/room_listing_model.dart b/lib/core/models/room_listing_model.dart
new file mode 100644
index 0000000000000000000000000000000000000000..ac7059e6a2f5cb71f44962ee95abf3534fc4af13
--- /dev/null
+++ b/lib/core/models/room_listing_model.dart
@@ -0,0 +1,73 @@
+// lib/core/models/room_listing_model.dart
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+/// Data model representing a room or boarding house listing.
+///
+/// Used for KOS/boarding/real estate listings under the
+/// `rooms_listings` collection as described in the project docs.
+class RoomListingModel {
+  final String id;
+  final String roomType;
+  final String address;
+  final GeoPoint? geoPoint;
+  final int price;
+  final int? deposit;
+  final String size;
+  final List<String> amenities;
+  final List<String> photos;
+  final String contactInfo;
+  final String ownerType;
+  final Timestamp createdAt;
+
+  RoomListingModel({
+    required this.id,
+    required this.roomType,
+    required this.address,
+    this.geoPoint,
+    required this.price,
+    this.deposit,
+    required this.size,
+    required this.amenities,
+    required this.photos,
+    required this.contactInfo,
+    required this.ownerType,
+    required this.createdAt,
+  });
+
+  factory RoomListingModel.fromFirestore(
+      DocumentSnapshot<Map<String, dynamic>> doc) {
+    final data = doc.data() ?? {};
+    return RoomListingModel(
+      id: doc.id,
+      roomType: data['roomType'] ?? '',
+      address: data['address'] ?? '',
+      geoPoint: data['geoPoint'],
+      price: data['price'] ?? 0,
+      deposit: data['deposit'],
+      size: data['size'] ?? '',
+      amenities:
+          data['amenities'] != null ? List<String>.from(data['amenities']) : [],
+      photos: data['photos'] != null ? List<String>.from(data['photos']) : [],
+      contactInfo: data['contactInfo'] ?? '',
+      ownerType: data['ownerType'] ?? 'owner',
+      createdAt: data['createdAt'] ?? Timestamp.now(),
+    );
+  }
+
+  Map<String, dynamic> toJson() {
+    return {
+      'roomType': roomType,
+      'address': address,
+      'geoPoint': geoPoint,
+      'price': price,
+      'deposit': deposit,
+      'size': size,
+      'amenities': amenities,
+      'photos': photos,
+      'contactInfo': contactInfo,
+      'ownerType': ownerType,
+      'createdAt': createdAt,
+    };
+  }
+}
diff --git a/lib/features/real_estate/data/room_repository.dart b/lib/features/real_estate/data/room_repository.dart
new file mode 100644
index 0000000000000000000000000000000000000000..6984d968a2e6a42972355c1d5cca5dcf57331ab2
--- /dev/null
+++ b/lib/features/real_estate/data/room_repository.dart
@@ -0,0 +1,75 @@
+// lib/features/real_estate/data/room_repository.dart
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+import '../../../core/models/room_listing_model.dart';
+
+/// Repository handling CRUD and favorite operations for room listings.
+class RoomRepository {
+  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
+
+  CollectionReference<Map<String, dynamic>> get _listingsCollection =>
+      _firestore.collection('rooms_listings');
+
+  Future<String> createListing(RoomListingModel listing) async {
+    final doc = await _listingsCollection.add(listing.toJson());
+    return doc.id;
+  }
+
+  Future<void> updateListing(RoomListingModel listing) async {
+    await _listingsCollection.doc(listing.id).update(listing.toJson());
+  }
+
+  Future<void> deleteListing(String listingId) async {
+    await _listingsCollection.doc(listingId).delete();
+  }
+
+  Future<RoomListingModel> fetchListing(String listingId) async {
+    final doc = await _listingsCollection.doc(listingId).get();
+    return RoomListingModel.fromFirestore(doc);
+  }
+
+  Stream<List<RoomListingModel>> fetchListings() {
+    return _listingsCollection
+        .orderBy('createdAt', descending: true)
+        .snapshots()
+        .map((s) => s.docs.map(RoomListingModel.fromFirestore).toList());
+  }
+
+  Future<void> addFavorite(String userId, String listingId) async {
+    await _firestore
+        .collection('users')
+        .doc(userId)
+        .collection('favorites')
+        .doc(listingId)
+        .set({'createdAt': FieldValue.serverTimestamp()});
+  }
+
+  Future<void> removeFavorite(String userId, String listingId) async {
+    await _firestore
+        .collection('users')
+        .doc(userId)
+        .collection('favorites')
+        .doc(listingId)
+        .delete();
+  }
+
+  Future<bool> isFavorite(String userId, String listingId) async {
+    final doc = await _firestore
+        .collection('users')
+        .doc(userId)
+        .collection('favorites')
+        .doc(listingId)
+        .get();
+    return doc.exists;
+  }
+
+  Stream<List<String>> watchFavorites(String userId) {
+    return _firestore
+        .collection('users')
+        .doc(userId)
+        .collection('favorites')
+        .snapshots()
+        .map((s) => s.docs.map((d) => d.id).toList());
+  }
+}
