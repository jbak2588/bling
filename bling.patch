diff --git a/docs/auction_model.md b/docs/auction_model.md
new file mode 100644
index 0000000000000000000000000000000000000000..892ba1dcce2804b6c75e1ba9215e2d47e3d34168
--- /dev/null
+++ b/docs/auction_model.md
@@ -0,0 +1,18 @@
+# AuctionModel Overview
+
+`AuctionModel` represents a premium auction listing stored in Firestore.
+It mirrors the schema defined in the project documentation for the `auctions`
+collection.
+
+Fields:
+- `title` and `description` describe the item
+- `images` holds photo URLs
+- `startPrice` is the initial amount
+- `currentBid` tracks the highest bid
+- `bidHistory` stores bid snapshots
+- `location` and `geoPoint` mark where the item is located
+- `startAt` and `endAt` define the auction window
+- `ownerId` references the seller
+- `trustLevelVerified` and `isAiVerified` flag vetted auctions
+
+See `lib/core/models/auction_model.dart` for implementation.
diff --git a/lib/core/models/auction_model.dart b/lib/core/models/auction_model.dart
new file mode 100644
index 0000000000000000000000000000000000000000..29ffdd15e6922e311d44d6682ecfe03d56b25186
--- /dev/null
+++ b/lib/core/models/auction_model.dart
@@ -0,0 +1,86 @@
+// lib/core/models/auction_model.dart
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+/// Data model representing a local premium auction item.
+///
+/// The Bling app stores auctions under the `auctions` collection as shown in
+/// the project documentation. Each document includes basic item information,
+/// pricing details and verification flags, while individual bids live in the
+/// `bids` subcollection of that auction. This model mirrors that schema so that
+/// premium auctions can easily be managed locally and synced with Firestore.
+class AuctionModel {
+  final String id;
+  final String title;
+  final String description;
+  final List<String> images;
+  final int startPrice;
+  final int currentBid;
+  final List<Map<String, dynamic>> bidHistory;
+  final String location;
+  final GeoPoint? geoPoint;
+  final Timestamp startAt;
+  final Timestamp endAt;
+  final String ownerId;
+  final bool trustLevelVerified;
+  final bool isAiVerified;
+
+  AuctionModel({
+    required this.id,
+    required this.title,
+    required this.description,
+    required this.images,
+    required this.startPrice,
+    required this.currentBid,
+    required this.bidHistory,
+    required this.location,
+    this.geoPoint,
+    required this.startAt,
+    required this.endAt,
+    required this.ownerId,
+    this.trustLevelVerified = false,
+    this.isAiVerified = false,
+  });
+
+  factory AuctionModel.fromFirestore(
+      DocumentSnapshot<Map<String, dynamic>> doc) {
+    final data = doc.data() ?? {};
+    return AuctionModel(
+      id: doc.id,
+      title: data['title'] ?? '',
+      description: data['description'] ?? '',
+      images:
+          data['images'] != null ? List<String>.from(data['images']) : [],
+      startPrice: data['startPrice'] ?? 0,
+      currentBid: data['currentBid'] ?? 0,
+      bidHistory: data['bidHistory'] != null
+          ? List<Map<String, dynamic>>.from(data['bidHistory'])
+          : [],
+      location: data['location'] ?? '',
+      geoPoint: data['geoPoint'],
+      startAt: data['startAt'] ?? Timestamp.now(),
+      endAt: data['endAt'] ?? Timestamp.now(),
+      ownerId: data['ownerId'] ?? '',
+      trustLevelVerified: data['trustLevelVerified'] ?? false,
+      isAiVerified: data['isAiVerified'] ?? false,
+    );
+  }
+
+  Map<String, dynamic> toJson() {
+    return {
+      'title': title,
+      'description': description,
+      'images': images,
+      'startPrice': startPrice,
+      'currentBid': currentBid,
+      'bidHistory': bidHistory,
+      'location': location,
+      'geoPoint': geoPoint,
+      'startAt': startAt,
+      'endAt': endAt,
+      'ownerId': ownerId,
+      'trustLevelVerified': trustLevelVerified,
+      'isAiVerified': isAiVerified,
+    };
+  }
+}
diff --git a/lib/core/models/bid_model.dart b/lib/core/models/bid_model.dart
new file mode 100644
index 0000000000000000000000000000000000000000..b1ffdf798fbbd7d8abc9690978f1621b3c89739b
--- /dev/null
+++ b/lib/core/models/bid_model.dart
@@ -0,0 +1,37 @@
+// lib/core/models/bid_model.dart
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+/// Model for bids stored under `auctions/{auctionId}/bids`.
+class BidModel {
+  final String id;
+  final String userId;
+  final int bidAmount;
+  final Timestamp bidTime;
+
+  BidModel({
+    required this.id,
+    required this.userId,
+    required this.bidAmount,
+    required this.bidTime,
+  });
+
+  factory BidModel.fromFirestore(
+      DocumentSnapshot<Map<String, dynamic>> doc) {
+    final data = doc.data() ?? {};
+    return BidModel(
+      id: doc.id,
+      userId: data['userId'] ?? '',
+      bidAmount: data['bidAmount'] ?? 0,
+      bidTime: data['bidTime'] ?? Timestamp.now(),
+    );
+  }
+
+  Map<String, dynamic> toJson() {
+    return {
+      'userId': userId,
+      'bidAmount': bidAmount,
+      'bidTime': bidTime,
+    };
+  }
+}
diff --git a/lib/features/auction/data/auction_repository.dart b/lib/features/auction/data/auction_repository.dart
new file mode 100644
index 0000000000000000000000000000000000000000..ee1ac69e8d4a29700c9d64adccf7495ce6cf9580
--- /dev/null
+++ b/lib/features/auction/data/auction_repository.dart
@@ -0,0 +1,57 @@
+// lib/features/auction/data/auction_repository.dart
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+import '../../../core/models/auction_model.dart';
+import '../../../core/models/bid_model.dart';
+
+/// Provides CRUD operations for auctions and bidding functionality.
+class AuctionRepository {
+  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
+
+  CollectionReference<Map<String, dynamic>> get _auctionsCollection =>
+      _firestore.collection('auctions');
+
+  Future<String> createAuction(AuctionModel auction) async {
+    final doc = await _auctionsCollection.add(auction.toJson());
+    return doc.id;
+  }
+
+  Future<void> updateAuction(AuctionModel auction) async {
+    await _auctionsCollection.doc(auction.id).update(auction.toJson());
+  }
+
+  Future<void> deleteAuction(String auctionId) async {
+    await _auctionsCollection.doc(auctionId).delete();
+  }
+
+  Future<AuctionModel> fetchAuction(String auctionId) async {
+    final doc = await _auctionsCollection.doc(auctionId).get();
+    return AuctionModel.fromFirestore(doc);
+  }
+
+  Stream<List<AuctionModel>> fetchAuctions() {
+    return _auctionsCollection
+        .orderBy('startAt', descending: true)
+        .snapshots()
+        .map((snapshot) =>
+            snapshot.docs.map(AuctionModel.fromFirestore).toList());
+  }
+
+  Future<String> placeBid(String auctionId, BidModel bid) async {
+    final doc = await _auctionsCollection
+        .doc(auctionId)
+        .collection('bids')
+        .add(bid.toJson());
+    return doc.id;
+  }
+
+  Stream<List<BidModel>> fetchBids(String auctionId) {
+    return _auctionsCollection
+        .doc(auctionId)
+        .collection('bids')
+        .orderBy('bidTime', descending: true)
+        .snapshots()
+        .map((snapshot) => snapshot.docs.map(BidModel.fromFirestore).toList());
+  }
+}
