diff --git a/lib/features/clubs/screens/clubs_screen.dart b/lib/features/clubs/screens/clubs_screen.dart
index 5556cb6a97c0802969a85b225fe75f86816e27db..f6cd5b4c249c49e641c068ca5c816f01d8944fa5 100644
--- a/lib/features/clubs/screens/clubs_screen.dart
+++ b/lib/features/clubs/screens/clubs_screen.dart
@@ -1,11 +1,12 @@
 import 'package:flutter/material.dart';
+import 'package:easy_localization/easy_localization.dart';
 import '../../../core/models/user_model.dart';
 
 class ClubsScreen extends StatelessWidget {
   final UserModel? userModel;
   const ClubsScreen({this.userModel, super.key});
   @override
   Widget build(BuildContext context) =>
-      const Center(child: Text('Clubs Screen'));
+      Center(child: Text('main.tabs.clubs'.tr()));
 }
 
diff --git a/lib/features/community/screens/community_screen.dart b/lib/features/community/screens/community_screen.dart
index ec7210e64d5a7416f38b4799c8d9f31db295cb23..a304fc2755faa7613442b5986825d703d287065a 100644
--- a/lib/features/community/screens/community_screen.dart
+++ b/lib/features/community/screens/community_screen.dart
@@ -1,10 +1,11 @@
 import 'package:flutter/material.dart';
+import 'package:easy_localization/easy_localization.dart';
 
 class CommunityScreen extends StatelessWidget {
   const CommunityScreen({super.key});
 
   @override
   Widget build(BuildContext context) {
-    return const Center(child: Text('커뮤니티 화면'));
+    return Center(child: Text('community.title'.tr()));
   }
 }
diff --git a/lib/features/jobs/screens/jobs_screen.dart b/lib/features/jobs/screens/jobs_screen.dart
index 65d8522d0f7bb378ca2e7159949c7175b920f537..dd79eab399f27d5d5078626fc383c7c826f62a62 100644
--- a/lib/features/jobs/screens/jobs_screen.dart
+++ b/lib/features/jobs/screens/jobs_screen.dart
@@ -1,10 +1,11 @@
 import 'package:flutter/material.dart';
+import 'package:easy_localization/easy_localization.dart';
 import '../../../core/models/user_model.dart';
 
 class JobsScreen extends StatelessWidget {
   final UserModel? userModel;
   const JobsScreen({this.userModel, super.key});
   @override
   Widget build(BuildContext context) =>
-      const Center(child: Text('Jobs Screen'));
+      Center(child: Text('main.tabs.jobs'.tr()));
 }
diff --git a/lib/features/local_stores/screens/local_stores_screen.dart b/lib/features/local_stores/screens/local_stores_screen.dart
index 94af6fbdf09d23cd58e24e2130d9b8cf3835351a..2afad49b5babc40aa658fcda94cae3508b118f85 100644
--- a/lib/features/local_stores/screens/local_stores_screen.dart
+++ b/lib/features/local_stores/screens/local_stores_screen.dart
@@ -1,10 +1,11 @@
 import 'package:flutter/material.dart';
+import 'package:easy_localization/easy_localization.dart';
 import '../../../core/models/user_model.dart';
 
 class LocalStoresScreen extends StatelessWidget {
   final UserModel? userModel;
   const LocalStoresScreen({this.userModel, super.key});
   @override
   Widget build(BuildContext context) =>
-      const Center(child: Text('Local Stores Screen'));
+      Center(child: Text('main.tabs.localStores'.tr()));
 }
diff --git a/lib/features/location/screens/location_filter_screen.dart b/lib/features/location/screens/location_filter_screen.dart
index 2e3e3837d3d1dadb398b74160eb35061c24d02ca..eca2aa03c761d9da2fe013722a407e5a4903e613 100644
--- a/lib/features/location/screens/location_filter_screen.dart
+++ b/lib/features/location/screens/location_filter_screen.dart
@@ -1,27 +1,28 @@
 import 'package:cloud_firestore/cloud_firestore.dart';
 import 'package:flutter/material.dart';
+import 'package:easy_localization/easy_localization.dart';
 
 import '../../../core/models/user_model.dart';
 
 class LocationFilterScreen extends StatefulWidget {
   final UserModel? userModel;
   const LocationFilterScreen({this.userModel, super.key});
 
   @override
   State<LocationFilterScreen> createState() => _LocationFilterScreenState();
 }
 
 class _LocationFilterScreenState extends State<LocationFilterScreen> {
   final List<String> _provinsiList = [];
   final List<String> _kabupatenList = [];
   final List<String> _kotaList = [];
   final List<String> _kecamatanList = [];
   final List<String> _kelurahanList = [];
 
   String? _selectedProvinsi;
   String? _selectedKabupaten;
   String? _selectedKota;
   String? _selectedKecamatan;
   String? _selectedKelurahan;
 
   bool _kabupatenEnabled = false;
@@ -138,92 +139,92 @@ class _LocationFilterScreenState extends State<LocationFilterScreen> {
     final kelSnapshot = await parent.doc(value).collection('kelurahan').get();
     setState(() {
       _kelurahanList.addAll(kelSnapshot.docs.map((d) => d.id));
       _kelurahanEnabled = true;
     });
   }
 
   void _onKelurahanChanged(String? value) {
     setState(() => _selectedKelurahan = value);
   }
 
   void _applyFilter() {
     final result = {
       'prov': _selectedProvinsi,
       'kab': _selectedKabupaten,
       'kota': _selectedKota,
       'kec': _selectedKecamatan,
       'kel': _selectedKelurahan,
     };
     Navigator.pop(context, result);
   }
 
   @override
   Widget build(BuildContext context) {
     return Scaffold(
-      appBar: AppBar(title: const Text('Location Filter')),
+      appBar: AppBar(title: Text('locationFilter.title'.tr())),
       body: _loadingProvinces
           ? const Center(child: CircularProgressIndicator())
           : Padding(
               padding: const EdgeInsets.all(16.0),
               child: Column(
                 children: [
                   DropdownButton<String>(
                     value: _selectedProvinsi,
-                    hint: const Text('Provinsi'),
+                    hint: Text('locationFilter.provinsi'.tr()),
                     isExpanded: true,
                     items: _provinsiList
                         .map((p) => DropdownMenuItem(value: p, child: Text(p)))
                         .toList(),
                     onChanged: _onProvinsiChanged,
                   ),
                   const SizedBox(height: 12),
                   DropdownButton<String>(
                     value: _selectedKabupaten,
-                    hint: const Text('Kabupaten'),
+                    hint: Text('locationFilter.kabupaten'.tr()),
                     isExpanded: true,
                     items: _kabupatenList
                         .map((p) => DropdownMenuItem(value: p, child: Text(p)))
                         .toList(),
                     onChanged: _kabupatenEnabled ? _onKabupatenChanged : null,
                   ),
                   const SizedBox(height: 12),
                   DropdownButton<String>(
                     value: _selectedKota,
-                    hint: const Text('Kota'),
+                    hint: Text('locationFilter.kota'.tr()),
                     isExpanded: true,
                     items: _kotaList
                         .map((p) => DropdownMenuItem(value: p, child: Text(p)))
                         .toList(),
                     onChanged: _kotaEnabled ? _onKotaChanged : null,
                   ),
                   const SizedBox(height: 12),
                   DropdownButton<String>(
                     value: _selectedKecamatan,
-                    hint: const Text('Kecamatan'),
+                    hint: Text('locationFilter.kecamatan'.tr()),
                     isExpanded: true,
                     items: _kecamatanList
                         .map((p) => DropdownMenuItem(value: p, child: Text(p)))
                         .toList(),
                     onChanged: _kecamatanEnabled ? _onKecamatanChanged : null,
                   ),
                   const SizedBox(height: 12),
                   DropdownButton<String>(
                     value: _selectedKelurahan,
-                    hint: const Text('Kelurahan'),
+                    hint: Text('locationFilter.kelurahan'.tr()),
                     isExpanded: true,
                     items: _kelurahanList
                         .map((p) => DropdownMenuItem(value: p, child: Text(p)))
                         .toList(),
                     onChanged: _kelurahanEnabled ? _onKelurahanChanged : null,
                   ),
                   const Spacer(),
                   ElevatedButton(
                     onPressed: _applyFilter,
-                    child: const Text('필터 적용하기'),
+                    child: Text('locationFilter.apply'.tr()),
                   ),
                 ],
               ),
             ),
     );
   }
 }
diff --git a/lib/features/main_screen/home_screen.dart b/lib/features/main_screen/home_screen.dart
index df06d3eae557c10767036789266e047c88df3a55..b963642222eb601cb7b6fa3f8f31cb7b36af15eb 100644
--- a/lib/features/main_screen/home_screen.dart
+++ b/lib/features/main_screen/home_screen.dart
@@ -15,51 +15,51 @@ import 'package:bling_app/features/marketplace/screens/product_registration_scre
 import 'package:cloud_firestore/cloud_firestore.dart';
 import 'package:easy_localization/easy_localization.dart';
 import 'package:firebase_auth/firebase_auth.dart';
 import 'package:flutter/material.dart';
 import 'package:bling_app/features/shared/widgets/trust_level_badge.dart';
 import 'package:google_fonts/google_fonts.dart';
 
 import '../../../core/models/user_model.dart';
 import '../../../core/utils/address_formatter.dart';
 import '../auth/screens/profile_edit_screen.dart';
 import '../local_news/screens/local_news_screen.dart';
 // import '../location/screens/location_setting_screen.dart';
 import '../location/screens/location_filter_screen.dart';
 import '../marketplace/screens/marketplace_screen.dart';
 import '../admin/screens/data_fix_screen.dart';
 
 // 검색 화면을 위한 임시 Placeholder
 // git 테스트
 
 class SearchScreen extends StatelessWidget {
   const SearchScreen({super.key});
   @override
   Widget build(BuildContext context) {
     return Scaffold(
       appBar: AppBar(title: Text('main.bottomNav.search'.tr())),
-      body: const Center(child: Text("Search Screen")),
+      body: Center(child: Text('main.search.placeholder'.tr())),
     );
   }
 }
 
 class HomeScreen extends StatefulWidget {
   const HomeScreen({super.key});
 
   @override
   State<HomeScreen> createState() => _HomeScreenState();
 }
 
 class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
   late final TabController _tabController;
   int _bottomNavIndex = 0;
 
   UserModel? _userModel;
   Map<String, String?>? _activeLocationFilter;
   String _currentAddress = "Loading...";
   bool _isLocationLoading = true;
   StreamSubscription? _userSubscription;
   StreamSubscription? _unreadChatsSubscription;
   int _totalUnreadCount = 0;
 
   final List<Map<String, dynamic>> _topTabs = [
     {'icon': Icons.new_releases_outlined, 'key': 'main.tabs.newFeed'},
@@ -205,51 +205,51 @@ class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
           icon: CircleAvatar(
             backgroundImage: (_userModel?.photoUrl != null)
                 ? NetworkImage(_userModel!.photoUrl!)
                 : null,
             child: (_userModel?.photoUrl == null)
                 ? const Icon(Icons.person)
                 : null,
           ),
           onPressed: () => Scaffold.of(context).openDrawer(),
           tooltip: MaterialLocalizations.of(context).openAppDrawerTooltip,
         ),
       ),
       title: InkWell(
         onTap: () async {
           final result = await Navigator.of(context).push<Map<String, String?>>(
             MaterialPageRoute(
                 builder: (_) => LocationFilterScreen(userModel: _userModel)),
           );
           if (result != null && mounted) {
             setState(() => _activeLocationFilter = result);
           }
         },
         child: Row(
           mainAxisSize: MainAxisSize.min,
           children: [
-            Text('My Town',
+            Text('main.myTown'.tr(),
                 style: GoogleFonts.inter(
                     fontWeight: FontWeight.bold, fontSize: 16)),
             const SizedBox(width: 8),
             Flexible(
               child: Text(
                 // _isLocationLoading
                 //     ? 'main.appBar.locationLoading'.tr()
                 //     : AddressFormatter.toSingkatan(_currentAddress),
                 getAppBarTitle(),
                 style:
                     const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                 overflow: TextOverflow.ellipsis,
               ),
             ),
             const Icon(Icons.arrow_drop_down, size: 24),
           ],
         ),
       ),
       centerTitle: true,
       actions: [
         IconButton(
           tooltip: 'Change Language',
           icon: const Icon(Icons.language),
           onPressed: () {
             final currentLang = context.locale.languageCode;
@@ -489,52 +489,52 @@ class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
                     titleKey: 'drawer.trustDashboard.rtRwAuth',
                     isCompleted: userModel.locationParts?['rt'] != null),
                 _buildTrustInfoTile(
                     icon: Icons.phone_android,
                     titleKey: 'drawer.trustDashboard.phoneAuth',
                     isCompleted: userModel.phoneNumber != null &&
                         userModel.phoneNumber!.isNotEmpty),
                 _buildTrustInfoTile(
                     icon: Icons.verified_user,
                     titleKey: 'drawer.trustDashboard.profileComplete',
                     isCompleted: userModel.profileCompleted),
                 const Divider(),
                 ListTile(
                   leading: const Icon(Icons.edit_outlined),
                   title: Text('drawer.editProfile'.tr()),
                   onTap: () {
                     Navigator.of(context).pop();
                     Navigator.of(context).push(MaterialPageRoute(
                         builder: (_) => const ProfileEditScreen()));
                   },
                 ),
                 const Divider(),
                 ListTile(
                   leading: const Icon(Icons.build_circle_outlined,
                       color: Colors.red),
-                  title: const Text('데이터 보정 실행',
-                      style: TextStyle(color: Colors.red)),
+                  title: Text('drawer.runDataFix'.tr(),
+                      style: const TextStyle(color: Colors.red)),
                   onTap: () {
                     Navigator.pop(context);
                     Navigator.of(context).push(MaterialPageRoute(
                         builder: (_) => const DataFixScreen()));
                   },
                 ),
                 ListTile(
                   leading: const Icon(Icons.logout),
                   title: Text('drawer.logout'.tr()),
                   onTap: () async {
                     if (mounted) Navigator.pop(context);
                     await FirebaseAuth.instance.signOut();
                   },
                 ),
               ],
             ),
     );
   }
 
   Widget _buildTrustInfoTile(
       {required IconData icon,
       required String titleKey,
       required bool isCompleted}) {
     return ListTile(
       leading: Icon(icon, color: isCompleted ? Colors.teal : Colors.grey),
diff --git a/lib/features/marketplace/screens/product_edit_screen.dart b/lib/features/marketplace/screens/product_edit_screen.dart
index 164da6088af92f9d03c30f4d0b1b25d20e276cdc..a5e6c5af091181bb872888a0bcd86d8ece9b3097 100644
--- a/lib/features/marketplace/screens/product_edit_screen.dart
+++ b/lib/features/marketplace/screens/product_edit_screen.dart
@@ -415,40 +415,45 @@ class _ProductEditScreenState extends State<ProductEditScreen> {
                   child: Text('marketplace.edit.resetLocation'.tr()),
                 ),
               ),
               const SizedBox(height: 16),
               TextFormField(
                 controller: _transactionPlaceController,
                 decoration: InputDecoration(labelText: 'address_detail_hint'.tr()),
               ),
               const SizedBox(height: 16),
               Row(
                 children: [
                   Text('marketplace.edit.negotiable'.tr()),
                   Switch(
                     value: _isNegotiable,
                     onChanged: (value) {
                       setState(() {
                         _isNegotiable = value;
                       });
                     },
                   ),
                 ],
               ),
               const SizedBox(height: 16),
               DropdownButtonFormField<String>(
                 value: _condition,
-                decoration: const InputDecoration(labelText: 'Condition'),
-                items: const [
-                  DropdownMenuItem(value: 'new', child: Text('New')),
-                  DropdownMenuItem(value: 'used', child: Text('Used')),
+                decoration:
+                    InputDecoration(labelText: 'marketplace.condition.label'.tr()),
+                items: [
+                  DropdownMenuItem(
+                      value: 'new',
+                      child: Text('marketplace.condition.new'.tr())),
+                  DropdownMenuItem(
+                      value: 'used',
+                      child: Text('marketplace.condition.used'.tr())),
                 ],
                 onChanged: (value) =>
                     setState(() => _condition = value ?? 'used'),
               ),
             ],
           ),
         ),
       ),
     );
   }
 }
diff --git a/lib/features/marketplace/screens/product_registration_screen.dart b/lib/features/marketplace/screens/product_registration_screen.dart
index 0f15b7eb653d587efedfe7257d33e13d5e320f49..f5289503a2a87de7ec1b6144bec699160b6f7550 100644
--- a/lib/features/marketplace/screens/product_registration_screen.dart
+++ b/lib/features/marketplace/screens/product_registration_screen.dart
@@ -165,51 +165,54 @@ class _ProductRegistrationScreenState extends State<ProductRegistrationScreen> {
       );
 
       // 1. 상품 문서 저장
       await FirebaseFirestore.instance
           .collection('products')
           .doc(newProductId)
           .set(newProduct.toJson());
 
       // 2. ✅ [핵심 추가] 사용자의 productIds 배열에 새 상품 ID 추가
       await FirebaseFirestore.instance
           .collection('users')
           .doc(user.uid)
           .update({
         'productIds': FieldValue.arrayUnion([newProductId]),
       });
 
       if (mounted) {
         ScaffoldMessenger.of(context).showSnackBar(
           SnackBar(content: Text('marketplace.registration.success'.tr())),
         );
         Navigator.of(context).popUntil((route) => route.isFirst);
       }
     } catch (e) {
       if (mounted) {
         ScaffoldMessenger.of(context).showSnackBar(
-          SnackBar(content: Text('상품 등록 실패: $e')),
+          SnackBar(
+            content:
+                Text('marketplace.registration.fail'.tr(args: {'error': e.toString()})),
+          ),
         );
       }
     } finally {
       if (mounted) {
         setState(() => _isLoading = false);
       }
     }
   }
 
   String _getCategoryName(BuildContext context, Category? category) {
     if (category == null) {
       return 'selectCategory'.tr();
     }
     final langCode = context.locale.languageCode;
     switch (langCode) {
       case 'ko':
         return category.nameKo;
       case 'id':
         return category.nameId;
       default:
         return category.nameEn;
     }
   }
 
   @override
@@ -315,54 +318,59 @@ class _ProductRegistrationScreenState extends State<ProductRegistrationScreen> {
               TextFormField(
                 controller: _transactionPlaceController,
                 decoration:
                     InputDecoration(labelText: 'address_detail_hint'.tr()),
               ),
               const SizedBox(height: 16),
               TextFormField(
                 controller: _priceController,
                 decoration:
                     InputDecoration(
                         labelText: 'marketplace.registration.priceHint'.tr()),
                 keyboardType: TextInputType.number,
                 validator: (value) => (value == null || value.isEmpty)
                     ? 'marketplace.errors.requiredField'.tr()
                     : null,
               ),
               SwitchListTile(
                 title: Text('marketplace.registration.negotiable'.tr()),
                 value: _isNegotiable,
                 onChanged: (value) => setState(() => _isNegotiable = value),
                 contentPadding: EdgeInsets.zero,
               ),
               const SizedBox(height: 16),
               DropdownButtonFormField<String>(
                 value: _condition,
-                decoration: const InputDecoration(labelText: 'Condition'),
-                items: const [
-                  DropdownMenuItem(value: 'new', child: Text('New')),
-                  DropdownMenuItem(value: 'used', child: Text('Used')),
+                decoration:
+                    InputDecoration(labelText: 'marketplace.condition.label'.tr()),
+                items: [
+                  DropdownMenuItem(
+                      value: 'new',
+                      child: Text('marketplace.condition.new'.tr())),
+                  DropdownMenuItem(
+                      value: 'used',
+                      child: Text('marketplace.condition.used'.tr())),
                 ],
                 onChanged: (value) =>
                     setState(() => _condition = value ?? 'used'),
               ),
               const SizedBox(height: 16),
               TextFormField(
                 controller: _descriptionController,
                 decoration: InputDecoration(
                   labelText:
                       'marketplace.registration.descriptionHint'.tr(),
                   alignLabelWithHint: true,
                   border: const OutlineInputBorder(),
                 ),
                 maxLines: 5,
                 validator: (value) => (value == null || value.isEmpty)
                     ? 'marketplace.errors.requiredField'.tr()
                     : null,
               ),
             ],
           ),
         ),
       ),
     );
   }
 }
diff --git a/lib/features/pom/screens/pom_screen.dart b/lib/features/pom/screens/pom_screen.dart
index 3b150c3ab8434642c4149c34743f119a92b31084..a74d1ccaf2eb83677ea16e8cc2edc273b2863248 100644
--- a/lib/features/pom/screens/pom_screen.dart
+++ b/lib/features/pom/screens/pom_screen.dart
@@ -1,9 +1,11 @@
 import 'package:flutter/material.dart';
+import 'package:easy_localization/easy_localization.dart';
 import '../../../core/models/user_model.dart';
 
 class PomScreen extends StatelessWidget {
   final UserModel? userModel;
   const PomScreen({this.userModel, super.key});
   @override
-  Widget build(BuildContext context) => const Center(child: Text('Pom Screen'));
+  Widget build(BuildContext context) =>
+      Center(child: Text('main.tabs.pom'.tr()));
 }
