diff --git a/lib/core/models/lost_item_model.dart b/lib/core/models/lost_item_model.dart
new file mode 100644
index 0000000000000000000000000000000000000000..79138fbae0102aa20357dc067825a2c9b23f245b
--- /dev/null
+++ b/lib/core/models/lost_item_model.dart
@@ -0,0 +1,69 @@
+// lib/core/models/lost_item_model.dart
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+/// Data model for lost and found posts with optional bounty.
+class LostItemModel {
+  final String id;
+  final String type;
+  final String title;
+  final Timestamp date;
+  final String locationDescription;
+  final String description;
+  final String? photoUrl;
+  final String contactInfo;
+  final int? reward;
+  final Timestamp expiresAt;
+  final Timestamp createdAt;
+  final String userId;
+
+  LostItemModel({
+    required this.id,
+    required this.type,
+    required this.title,
+    required this.date,
+    required this.locationDescription,
+    required this.description,
+    this.photoUrl,
+    required this.contactInfo,
+    this.reward,
+    required this.expiresAt,
+    required this.createdAt,
+    required this.userId,
+  });
+
+  factory LostItemModel.fromFirestore(
+      DocumentSnapshot<Map<String, dynamic>> doc) {
+    final data = doc.data() ?? {};
+    return LostItemModel(
+      id: doc.id,
+      type: data['type'] ?? '',
+      title: data['title'] ?? '',
+      date: data['date'] ?? Timestamp.now(),
+      locationDescription: data['locationDescription'] ?? '',
+      description: data['description'] ?? '',
+      photoUrl: data['photoUrl'],
+      contactInfo: data['contactInfo'] ?? '',
+      reward: data['reward'],
+      expiresAt: data['expiresAt'] ?? Timestamp.now(),
+      createdAt: data['createdAt'] ?? Timestamp.now(),
+      userId: data['userId'] ?? '',
+    );
+  }
+
+  Map<String, dynamic> toJson() {
+    return {
+      'type': type,
+      'title': title,
+      'date': date,
+      'locationDescription': locationDescription,
+      'description': description,
+      'photoUrl': photoUrl,
+      'contactInfo': contactInfo,
+      'reward': reward,
+      'expiresAt': expiresAt,
+      'createdAt': createdAt,
+      'userId': userId,
+    };
+  }
+}
diff --git a/lib/features/lost_found/data/lost_item_repository.dart b/lib/features/lost_found/data/lost_item_repository.dart
new file mode 100644
index 0000000000000000000000000000000000000000..78c177e692a23fb61db68ca69fe004872428a68a
--- /dev/null
+++ b/lib/features/lost_found/data/lost_item_repository.dart
@@ -0,0 +1,49 @@
+// lib/features/lost_found/data/lost_item_repository.dart
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+import '../../../core/models/lost_item_model.dart';
+
+/// Provides CRUD operations for lost & found items and removes expired posts.
+class LostItemRepository {
+  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
+
+  CollectionReference<Map<String, dynamic>> get _itemsCollection =>
+      _firestore.collection('lost_items');
+
+  Future<String> createLostItem(LostItemModel item) async {
+    final doc = await _itemsCollection.add(item.toJson());
+    return doc.id;
+  }
+
+  Future<void> updateLostItem(LostItemModel item) async {
+    await _itemsCollection.doc(item.id).update(item.toJson());
+  }
+
+  Future<void> deleteLostItem(String id) async {
+    await _itemsCollection.doc(id).delete();
+  }
+
+  Future<LostItemModel> fetchLostItem(String id) async {
+    final doc = await _itemsCollection.doc(id).get();
+    return LostItemModel.fromFirestore(doc);
+  }
+
+  Stream<List<LostItemModel>> fetchLostItems() {
+    return _itemsCollection
+        .orderBy('createdAt', descending: true)
+        .snapshots()
+        .map((s) => s.docs.map(LostItemModel.fromFirestore).toList());
+  }
+
+  Future<void> removeExpiredItems() async {
+    final expired = await _itemsCollection
+        .where('expiresAt', isLessThan: Timestamp.now())
+        .get();
+    final batch = _firestore.batch();
+    for (final doc in expired.docs) {
+      batch.delete(doc.reference);
+    }
+    await batch.commit();
+  }
+}
