diff --git a/lib/core/models/job_model.dart b/lib/core/models/job_model.dart
new file mode 100644
index 0000000000000000000000000000000000000000..39e8b83d094f70c80e685fee6c73488506e04564
--- /dev/null
+++ b/lib/core/models/job_model.dart
@@ -0,0 +1,68 @@
+// lib/core/models/job_model.dart
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+/// Job listing data model mapped to the Firestore `jobs` collection.
+class JobModel {
+  final String id;
+  final String title;
+  final String description;
+  final String category;
+  final String? location;
+  final GeoPoint? geoPoint;
+  final Timestamp createdAt;
+  final String userId;
+  final String trustLevelRequired;
+  final int viewsCount;
+  final int likesCount;
+  final bool isPaidListing;
+
+  JobModel({
+    required this.id,
+    required this.title,
+    required this.description,
+    required this.category,
+    this.location,
+    this.geoPoint,
+    required this.createdAt,
+    required this.userId,
+    required this.trustLevelRequired,
+    this.viewsCount = 0,
+    this.likesCount = 0,
+    this.isPaidListing = false,
+  });
+
+  factory JobModel.fromFirestore(DocumentSnapshot<Map<String, dynamic>> doc) {
+    final data = doc.data() ?? {};
+    return JobModel(
+      id: doc.id,
+      title: data['title'] ?? '',
+      description: data['description'] ?? '',
+      category: data['category'] ?? '',
+      location: data['location'],
+      geoPoint: data['geoPoint'],
+      createdAt: data['createdAt'] ?? Timestamp.now(),
+      userId: data['userId'] ?? '',
+      trustLevelRequired: data['trustLevelRequired'] ?? 'normal',
+      viewsCount: data['viewsCount'] ?? 0,
+      likesCount: data['likesCount'] ?? 0,
+      isPaidListing: data['isPaidListing'] ?? false,
+    );
+  }
+
+  Map<String, dynamic> toJson() {
+    return {
+      'title': title,
+      'description': description,
+      'category': category,
+      'location': location,
+      'geoPoint': geoPoint,
+      'createdAt': createdAt,
+      'userId': userId,
+      'trustLevelRequired': trustLevelRequired,
+      'viewsCount': viewsCount,
+      'likesCount': likesCount,
+      'isPaidListing': isPaidListing,
+    };
+  }
+}
diff --git a/lib/features/jobs/data/job_repository.dart b/lib/features/jobs/data/job_repository.dart
new file mode 100644
index 0000000000000000000000000000000000000000..80014f8185af6575169df899db2df3cbe86a4131
--- /dev/null
+++ b/lib/features/jobs/data/job_repository.dart
@@ -0,0 +1,37 @@
+// lib/features/jobs/data/job_repository.dart
+
+import '../../../core/models/job_model.dart';
+
+/// Repository for managing local job listings.
+/// All CRUD operations here operate on an in-memory list
+/// rather than a remote database.
+class JobRepository {
+  final List<JobModel> _jobs = [];
+
+  Future<void> createJob(JobModel job) async {
+    _jobs.add(job);
+  }
+
+  Future<List<JobModel>> readJobs() async {
+    return _jobs;
+  }
+
+  Future<JobModel?> readJob(String id) async {
+    try {
+      return _jobs.firstWhere((j) => j.id == id);
+    } catch (_) {
+      return null;
+    }
+  }
+
+  Future<void> updateJob(JobModel job) async {
+    final index = _jobs.indexWhere((j) => j.id == job.id);
+    if (index != -1) {
+      _jobs[index] = job;
+    }
+  }
+
+  Future<void> deleteJob(String id) async {
+    _jobs.removeWhere((j) => j.id == id);
+  }
+}
