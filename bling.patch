diff --git a/lib/features/find_friends/screens/find_friend_detail_screen.dart b/lib/features/find_friends/screens/find_friend_detail_screen.dart
index a43b872180fa345aafb02ff77cde2cef4446eded..3d825421a1f2d1e31398539613abe32aaac30680 100644
--- a/lib/features/find_friends/screens/find_friend_detail_screen.dart
+++ b/lib/features/find_friends/screens/find_friend_detail_screen.dart
@@ -98,67 +98,70 @@ class _FindFriendDetailScreenState extends State<FindFriendDetailScreen> {
                   ],
                   if (user.interests != null && user.interests!.isNotEmpty) ...[
                     Text("interests.title".tr(), style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                     const SizedBox(height: 8),
                     Wrap(
                       spacing: 8.0,
                       runSpacing: 4.0,
                       children: user.interests!.map((interestKey) {
                         return Chip(label: Text("interests.items.$interestKey".tr()));
                       }).toList(),
                     ),
                   ],
                 ],
               ),
             ),
           ],
         ),
       ),
       floatingActionButton: (currentUser == null || currentUser.uid == user.uid)
           ? null
           : StreamBuilder<QuerySnapshot>(
               stream: FindFriendRepository().getRequestStatus(currentUser.uid, user.uid),
               builder: (context, snapshot) {
                 if (currentUser.friends?.contains(user.uid) ?? false) {
                   return FloatingActionButton.extended(
+                    heroTag: 'friend_detail_fab',
                     onPressed: null,
                     label: Text("friendDetail.alreadyFriends".tr()),
                     icon: const Icon(Icons.check_circle),
                     backgroundColor: Colors.grey,
                   );
                 }
 
                 if (snapshot.hasData && snapshot.data!.docs.isNotEmpty) {
                   return FloatingActionButton.extended(
+                    heroTag: 'friend_detail_fab',
                     onPressed: null,
                     label: Text("friendDetail.requestSent".tr()),
                     icon: const Icon(Icons.hourglass_top),
                     backgroundColor: Colors.orange,
                   );
                 }
-                
+
                 return FloatingActionButton.extended(
+                  heroTag: 'friend_detail_fab',
                   onPressed: () async {
                     try {
                       await FindFriendRepository().sendFriendRequest(currentUser.uid, user.uid);
                       // V V V --- [수정] 화면이 살아있는지(mounted) 확인 후 SnackBar 호출 --- V V V
                       if (mounted) {
                         ScaffoldMessenger.of(context).showSnackBar(
                           SnackBar(content: Text("friendDetail.requestSuccess".tr())),
                         );
                       }
                     } catch (e) {
                       if (mounted) {
                         ScaffoldMessenger.of(context).showSnackBar(
                           SnackBar(content: Text("${"friendDetail.requestFailed".tr()} $e")),
                         );
                       }
                     }
                   },
                   label: Text("friendDetail.request".tr()),
                   icon: const Icon(Icons.person_add_alt_1),
                 );
               },
             ),
       floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
     );
   }
\ No newline at end of file
diff --git a/lib/features/main_screen/home_screen.dart b/lib/features/main_screen/home_screen.dart
index 26b7932977895ffb396fb02b9694fea36ce660f0..a22c9366e6edab95cdf00bab0b53c4674c284c5b 100644
--- a/lib/features/main_screen/home_screen.dart
+++ b/lib/features/main_screen/home_screen.dart
@@ -335,50 +335,51 @@ class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
     return Scaffold(
       appBar: null,
       drawer: _buildAppDrawer(_userModel),
       body: IndexedStack(
         index: effectiveIndex,
         children: pages,
       ),
       bottomNavigationBar: BottomAppBar(
         shape: const CircularNotchedRectangle(),
         notchMargin: 8.0,
         child: Row(
           mainAxisAlignment: MainAxisAlignment.spaceAround,
           children: <Widget>[
             _buildBottomNavItem(icon: Icons.home, index: 0),
             _buildBottomNavItem(icon: Icons.search, index: 1),
             const SizedBox(width: 40),
             _buildBottomNavItem(
                 icon: Icons.chat_bubble_outline,
                 index: 3,
                 badgeCount: _totalUnreadCount),
             _buildBottomNavItem(icon: Icons.person_outline, index: 4),
           ],
         ),
       ),
       floatingActionButton: FloatingActionButton(
+        heroTag: 'home_main_fab',
         onPressed: _onFloatingActionButtonTapped,
         child: const Icon(Icons.add),
       ),
       floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,
     );
   }
 
   Widget _buildBottomNavItem(
       {required IconData icon, required int index, int badgeCount = 0}) {
     final Map<int, String> tooltipKeys = {
       0: 'main.bottomNav.home',
       1: 'main.bottomNav.search',
       3: 'main.bottomNav.chat',
       4: 'main.bottomNav.myBling'
     };
     final isSelected = _bottomNavIndex == index;
 
     Widget iconWidget = Icon(icon,
         color: isSelected ? Theme.of(context).primaryColor : Colors.grey);
 
     if (badgeCount > 0) {
       iconWidget = Badge(label: Text('$badgeCount'), child: iconWidget);
     }
 
     return IconButton(
