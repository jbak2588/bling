diff --git a/lib/features/my_bling/screens/my_bling_screen.dart b/lib/features/my_bling/screens/my_bling_screen.dart
index f2e6ea250fb3f22b6f49cb16a89fe1b970bf2aff..aea51ddcf71870a3946df832f5e168404fb0c453 100644
--- a/lib/features/my_bling/screens/my_bling_screen.dart
+++ b/lib/features/my_bling/screens/my_bling_screen.dart
@@ -100,55 +100,60 @@ class _MyBlingScreenState extends State<MyBlingScreen>
   Widget _buildProfileHeader(BuildContext context, UserModel user) {
     return Padding(
       padding: const EdgeInsets.all(20.0),
       child: Column(
         children: [
           Row(
             children: [
               CircleAvatar(
                 radius: 40,
                 backgroundImage:
                     (user.photoUrl != null && user.photoUrl!.startsWith('http'))
                         ? NetworkImage(user.photoUrl!)
                         : null,
                 child: (user.photoUrl == null ||
                         !user.photoUrl!.startsWith('http'))
                     ? const Icon(Icons.person, size: 40)
                     : null,
               ),
               const SizedBox(width: 20),
               Expanded(
                 child: IntrinsicHeight(
                   child: Row(
                     mainAxisAlignment: MainAxisAlignment.spaceAround,
                     children: [
                       _buildStatColumn(
-                          'myBling.stats.posts', '12'), // TODO: 실제 데이터 연동
-                      _buildStatColumn('myBling.stats.followers', '128'),
+                          'myBling.stats.posts', _getPostsCount(user.uid)),
+                      _buildStatColumn(
+                          'myBling.stats.followers',
+                          _getFollowersCount(user.uid)),
                       const VerticalDivider(width: 20, thickness: 1),
-                      _buildStatColumn('myBling.stats.neighbors', '34'),
-                      _buildStatColumn('myBling.stats.friends', '5'),
+                      _buildStatColumn(
+                          'myBling.stats.neighbors',
+                          _getNeighborsCount(user.uid)),
+                      _buildStatColumn(
+                          'myBling.stats.friends', _getFriendsCount(user.uid)),
                     ],
                   ),
                 ),
               ),
             ],
           ),
           const SizedBox(height: 16),
           Align(
             alignment: Alignment.centerLeft,
             child: Column(
               crossAxisAlignment: CrossAxisAlignment.start,
               children: [
                 Row(
                   children: [
                     Text(
                       user.nickname,
                       style: GoogleFonts.inter(
                           fontWeight: FontWeight.bold, fontSize: 18),
                     ),
                     const SizedBox(width: 6),
                     TrustLevelBadge(trustLevel: user.trustLevel),
                     const SizedBox(width: 4),
                     Text(
                       '(${user.trustScore})',
                       style: GoogleFonts.inter(
@@ -166,72 +171,122 @@ class _MyBlingScreenState extends State<MyBlingScreen>
                     style: GoogleFonts.inter(color: Colors.grey[700]),
                   ),
                 const SizedBox(height: 6),
                 if (user.locationName != null)
                   Row(
                     children: [
                       Icon(Icons.location_on_outlined,
                           size: 16, color: Colors.grey[600]),
                       const SizedBox(width: 4),
                       Text(
                         user.locationName!,
                         style: GoogleFonts.inter(color: Colors.grey[600]),
                       ),
                     ],
                   ),
               ],
             ),
           ),
         ],
       ),
     );
   }
 
   /// 프로필 하단 탭 UI 위젯
   Widget _buildProfileTabs(UserModel user) {
-    // TODO: 추후 user.privacySettings 값에 따라 공개 여부 결정 로직 추가
+    final isPublic = user.privacySettings?['isProfilePublic'] ?? true;
+    if (!isPublic) {
+      return const Center(child: Text('This profile is private.'));
+    }
     return Column(
       children: [
         TabBar(
           controller: _tabController,
           labelColor: const Color(0xFF00A66C),
           unselectedLabelColor: const Color(0xFF616161),
           indicatorColor: const Color(0xFF00A66C),
           tabs: [
             Tab(text: 'myBling.tabs.posts'.tr()),
             Tab(text: 'myBling.tabs.products'.tr()),
             Tab(text: 'myBling.tabs.bookmarks'.tr()),
           ],
         ),
         Expanded(
           child: TabBarView(
             controller: _tabController,
             children: const [
               // Center(child: Text('내가 쓴 게시물이 표시될 영역')),
               // ▼▼▼▼▼ '내 게시물' 탭에 새로운 위젯 적용 ▼▼▼▼▼
               UserPostList(),
               // Center(child: Text('내 판매상품이 표시될 영역')),
               // ▼▼▼▼▼ '내 판매상품' 탭에 새로운 위젯 적용 ▼▼▼▼▼
               UserProductList(),
               UserBookmarkList(),
             ],
           ),
         ),
       ],
     );
   }
 
   /// 프로필 통계 정보 표시 위젯
-  Widget _buildStatColumn(String labelKey, String count) {
-    return Column(
-      mainAxisAlignment: MainAxisAlignment.center,
-      children: [
-        Text(count,
-            style:
-                GoogleFonts.inter(fontSize: 18, fontWeight: FontWeight.bold)),
-        const SizedBox(height: 2),
-        Text(labelKey.tr(),
-            style: GoogleFonts.inter(color: Colors.grey, fontSize: 12)),
-      ],
+  Widget _buildStatColumn(String labelKey, Future<int> countFuture) {
+    return FutureBuilder<int>(
+      future: countFuture,
+      builder: (context, snapshot) {
+        final count = snapshot.data ?? 0;
+        return Column(
+          mainAxisAlignment: MainAxisAlignment.center,
+          children: [
+            Text('$count',
+                style: GoogleFonts.inter(
+                    fontSize: 18, fontWeight: FontWeight.bold)),
+            const SizedBox(height: 2),
+            Text(labelKey.tr(),
+                style: GoogleFonts.inter(color: Colors.grey, fontSize: 12)),
+          ],
+        );
+      },
     );
   }
+
+  Future<int> _getPostsCount(String uid) async {
+    final snapshot = await FirebaseFirestore.instance
+        .collection('posts')
+        .where('userId', isEqualTo: uid)
+        .get();
+    return snapshot.size;
+  }
+
+  Future<int> _getFollowersCount(String uid) async {
+    final snapshot = await FirebaseFirestore.instance
+        .collection('follows')
+        .where('toUserId', isEqualTo: uid)
+        .get();
+    return snapshot.size;
+  }
+
+  Future<int> _getNeighborsCount(String uid) async {
+    final snapshot = await FirebaseFirestore.instance
+        .collection('follows')
+        .where('fromUserId', isEqualTo: uid)
+        .get();
+    return snapshot.size;
+  }
+
+  Future<int> _getFriendsCount(String uid) async {
+    final followersSnapshot = await FirebaseFirestore.instance
+        .collection('follows')
+        .where('toUserId', isEqualTo: uid)
+        .get();
+    final followingSnapshot = await FirebaseFirestore.instance
+        .collection('follows')
+        .where('fromUserId', isEqualTo: uid)
+        .get();
+
+    final followerIds =
+        followersSnapshot.docs.map((d) => d['fromUserId'] as String).toSet();
+    final followingIds =
+        followingSnapshot.docs.map((d) => d['toUserId'] as String).toSet();
+    return followerIds.intersection(followingIds).length;
+  }
 }
