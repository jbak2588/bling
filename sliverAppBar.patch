diff --git a/lib/features/local_news/screens/local_news_screen.dart b/lib/features/local_news/screens/local_news_screen.dart
index dc7eec4c454ff9dde960e2bdae78ff7d085642c5..aec481886b4771552c7c0d3f8f4f5a1376bea744 100644
--- a/lib/features/local_news/screens/local_news_screen.dart
+++ b/lib/features/local_news/screens/local_news_screen.dart
@@ -1,32 +1,34 @@
 // lib/features/local_news/screens/local_news_screen.dart
 
 import 'package:bling_app/core/models/user_model.dart';
 import 'package:cloud_firestore/cloud_firestore.dart';
 import 'package:easy_localization/easy_localization.dart'; // ✅ easy_localization import
 import 'package:flutter/material.dart';
 import 'package:google_fonts/google_fonts.dart';
+import '../../location/screens/location_setting_screen.dart';
+import '../../../core/utils/address_formatter.dart';
 
 import '../../../core/constants/app_categories.dart';
 import '../../../core/models/post_model.dart';
 import '../widgets/post_card.dart';
 
 class LocalNewsScreen extends StatefulWidget {
   final UserModel? userModel;
   const LocalNewsScreen({this.userModel, super.key});
 
   @override
   State<LocalNewsScreen> createState() => _LocalNewsScreenState();
 }
 
 class _LocalNewsScreenState extends State<LocalNewsScreen>
     with TickerProviderStateMixin {
   late final TabController _tabController;
 
   // ✅ [다국어 수정] '전체' 탭 이름을 다국어 키로 변경합니다.
   // late final List<String> _tabs;
 
   final List<String> _categoryIds = [
     'all',
     ...AppCategories.postCategories.map((c) => c.categoryId)
   ];
 
@@ -39,77 +41,136 @@ class _LocalNewsScreenState extends State<LocalNewsScreen>
   @override
   void dispose() {
     _tabController.dispose();
     super.dispose();
   }
 
   @override
   Widget build(BuildContext context) {
     if (widget.userModel == null) {
       return Center(
         child: Padding(
           padding: const EdgeInsets.all(24.0),
           // ✅ [다국어 수정] 위치 미설정 안내 메시지를 다국어 키로 변경합니다.
           child: Text('localNewsFeed.setLocationPrompt'.tr(),
               textAlign: TextAlign.center,
               style: const TextStyle(fontSize: 16, color: Colors.grey)),
         ),
       );
     }
 
     final List<String> tabs = [
       'localNewsFeed.allCategory'.tr(),
       ...AppCategories.postCategories.map((c) => c.nameKey.tr())
     ];
 
-    return Column(
-      children: [
-        TabBar(
-          controller: _tabController,
-          isScrollable: true,
-          tabAlignment: TabAlignment.start,
-          labelColor: const Color(0xFF00A66C),
-          unselectedLabelColor: const Color(0xFF616161),
-          indicatorColor: const Color(0xFF00A66C),
-          indicatorWeight: 2.0,
-          labelStyle: GoogleFonts.inter(fontWeight: FontWeight.w600),
-          unselectedLabelStyle: GoogleFonts.inter(),
-          tabs: tabs.map((label) => Tab(text: label)).toList(),
-        ),
-        Expanded(
-          child: TabBarView(
-            controller: _tabController,
-            children: _categoryIds.map((categoryId) {
-              return _FeedCategoryList(
-                key: PageStorageKey('feed_category_$categoryId'),
-                category: categoryId,
-                userModel: widget.userModel,
-              );
-            }).toList(),
-          ),
-        ),
-      ],
+    final currentAddress = AddressFormatter.toSingkatan(
+        widget.userModel?.locationName ?? 'main.appBar.locationNotSet'.tr());
+
+    return NestedScrollView(
+      headerSliverBuilder: (context, innerBoxIsScrolled) {
+        return [
+          SliverAppBar(
+            pinned: true,
+            leading: Builder(
+              builder: (context) => IconButton(
+                icon: CircleAvatar(
+                  backgroundImage: (widget.userModel?.photoUrl != null)
+                      ? NetworkImage(widget.userModel!.photoUrl!)
+                      : null,
+                  child: (widget.userModel?.photoUrl == null)
+                      ? const Icon(Icons.person)
+                      : null,
+                ),
+                onPressed: () => Scaffold.of(context).openDrawer(),
+                tooltip: MaterialLocalizations.of(context).openAppDrawerTooltip,
+              ),
+            ),
+            title: InkWell(
+              onTap: () => Navigator.of(context).push(
+                  MaterialPageRoute(builder: (_) => const LocationSettingScreen())),
+              child: Row(
+                mainAxisSize: MainAxisSize.min,
+                children: [
+                  Text('Local News',
+                      style:
+                          GoogleFonts.inter(fontWeight: FontWeight.bold, fontSize: 16)),
+                  const SizedBox(width: 8),
+                  Flexible(
+                    child: Text(
+                      currentAddress,
+                      style:
+                          const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
+                      overflow: TextOverflow.ellipsis,
+                    ),
+                  ),
+                  const Icon(Icons.arrow_drop_down, size: 24),
+                ],
+              ),
+            ),
+            centerTitle: true,
+            actions: [
+              IconButton(
+                tooltip: 'Change Language',
+                icon: const Icon(Icons.language),
+                onPressed: () {
+                  final currentLang = context.locale.languageCode;
+                  context.setLocale(Locale(currentLang == 'id'
+                      ? 'ko'
+                      : (currentLang == 'ko' ? 'en' : 'id')));
+                },
+              ),
+              IconButton(
+                icon: const Icon(Icons.notifications_none),
+                onPressed: () {},
+              ),
+            ],
+            bottom: TabBar(
+              controller: _tabController,
+              isScrollable: true,
+              tabAlignment: TabAlignment.start,
+              labelColor: const Color(0xFF00A66C),
+              unselectedLabelColor: const Color(0xFF616161),
+              indicatorColor: const Color(0xFF00A66C),
+              indicatorWeight: 2.0,
+              labelStyle: GoogleFonts.inter(fontWeight: FontWeight.w600),
+              unselectedLabelStyle: GoogleFonts.inter(),
+              tabs: tabs.map((label) => Tab(text: label)).toList(),
+            ),
+          )
+        ];
+      },
+      body: TabBarView(
+        controller: _tabController,
+        children: _categoryIds.map((categoryId) {
+          return _FeedCategoryList(
+            key: PageStorageKey('feed_category_$categoryId'),
+            category: categoryId,
+            userModel: widget.userModel,
+          );
+        }).toList(),
+      ),
     );
   }
 }
 
 class _FeedCategoryList extends StatefulWidget {
   final String category;
   final UserModel? userModel;
   const _FeedCategoryList({super.key, required this.category, this.userModel});
 
   @override
   State<_FeedCategoryList> createState() => __FeedCategoryListState();
 }
 
 class __FeedCategoryListState extends State<_FeedCategoryList>
     with AutomaticKeepAliveClientMixin {
   final List<DocumentSnapshot> _posts = [];
   bool _isLoading = false;
   bool _hasMore = true;
   DocumentSnapshot? _lastDocument;
   final int _limit = 10;
   final _scrollController = ScrollController();
 
   @override
   void initState() {
     super.initState();
